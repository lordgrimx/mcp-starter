{"version":3,"file":"extension.js","mappings":"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","sources":[".././src/providers/clientTreeDataProvider.ts",".././src/mcpManager.ts",".././src/extension.ts","../external commonjs \"vscode\"",".././src/webviews/mcpWebViewPanel.ts",".././src/providers/serverTreeDataProvider.ts","../external node-commonjs \"os\"","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\r\nimport { MCPManager } from '../mcpManager';\r\nimport { MCPClient } from '../models/mcpClient';\r\n\r\nexport class ClientTreeDataProvider implements vscode.TreeDataProvider<ClientTreeItem> {\r\n    private _onDidChangeTreeData: vscode.EventEmitter<ClientTreeItem | undefined | null | void> = new vscode.EventEmitter<ClientTreeItem | undefined | null | void>();\r\n    readonly onDidChangeTreeData: vscode.Event<ClientTreeItem | undefined | null | void> = this._onDidChangeTreeData.event;\r\n    \r\n    constructor(private mcpManager: MCPManager) {}\r\n\r\n    refresh(): void {\r\n        this._onDidChangeTreeData.fire();\r\n    }\r\n\r\n    getTreeItem(element: ClientTreeItem): vscode.TreeItem {\r\n        return element;\r\n    }\r\n\r\n    getChildren(element?: ClientTreeItem): Thenable<ClientTreeItem[]> {\r\n        if (!element) {\r\n            // Root level - return all clients\r\n            const clients = this.mcpManager.getClients();\r\n            return Promise.resolve(\r\n                clients.map(client => new ClientTreeItem(\r\n                    client,\r\n                    client.name,\r\n                    vscode.TreeItemCollapsibleState.None,\r\n                    {\r\n                        title: client.isActive ? 'Stop Client' : 'Start Client',\r\n                        command: client.isActive ? 'mcpManager.stopClient' : 'mcpManager.startClient',\r\n                        arguments: [client.id]\r\n                    }\r\n                ))\r\n            );\r\n        }\r\n        \r\n        return Promise.resolve([]);\r\n    }\r\n}\r\n\r\nexport class ClientTreeItem extends vscode.TreeItem {\r\n    constructor(\r\n        public readonly client: MCPClient,\r\n        public readonly label: string,\r\n        public readonly collapsibleState: vscode.TreeItemCollapsibleState,\r\n        public readonly command?: vscode.Command\r\n    ) {\r\n        super(label, collapsibleState);\r\n        \r\n        this.tooltip = `Type: ${client.type} | Command: ${client.command}`;\r\n        this.description = client.isActive ? 'Running' : 'Stopped';\r\n        this.iconPath = client.isActive ? \r\n            new vscode.ThemeIcon('play') :\r\n            new vscode.ThemeIcon('stop');\r\n        this.contextValue = 'mcpClient';\r\n    }\r\n}","import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport * as os from 'os';\r\nimport { ServerTreeDataProvider } from './providers/serverTreeDataProvider';\r\nimport { ClientTreeDataProvider } from './providers/clientTreeDataProvider';\r\nimport { MCPServer, MCPServerType } from './models/mcpServer';\r\nimport { MCPClient, MCPClientType } from './models/mcpClient';\r\nimport { MCPWebViewPanel } from './webviews/mcpWebViewPanel';\r\n\r\nexport class MCPManager {\r\n    private servers: MCPServer[] = [];\r\n    private clients: MCPClient[] = [];\r\n    private context: vscode.ExtensionContext;\r\n    private serversProvider: ServerTreeDataProvider;\r\n    private clientsProvider: ClientTreeDataProvider;\r\n    private settingsPath: string;\r\n\r\n    constructor(context: vscode.ExtensionContext) {\r\n        this.context = context;\r\n        this.serversProvider = new ServerTreeDataProvider(this);\r\n        this.clientsProvider = new ClientTreeDataProvider(this);\r\n        \r\n        // Platform-independent settings path\r\n        this.settingsPath = path.join(\r\n            os.homedir(),\r\n            process.platform === 'darwin' \r\n                ? 'Library/Application Support/Code - Insiders/User/settings.json'\r\n                : process.platform === 'linux'\r\n                    ? '.config/Code - Insiders/User/settings.json'\r\n                    : 'AppData/Roaming/Code - Insiders/User/settings.json'\r\n        );\r\n        \r\n        this.loadServersAndClients();\r\n    }\r\n\r\n    private loadServersAndClients() {\r\n        // Load from storage if available\r\n        const storedServers = this.context.globalState.get<MCPServer[]>('mcpServers', []);\r\n        const storedClients = this.context.globalState.get<MCPClient[]>('mcpClients', []);\r\n\r\n        this.servers = storedServers;\r\n        this.clients = storedClients;\r\n\r\n        // Refresh the tree views\r\n        this.refreshTreeViews();\r\n    }\r\n\r\n    private saveServersAndClients() {\r\n        // Save to storage\r\n        this.context.globalState.update('mcpServers', this.servers);\r\n        this.context.globalState.update('mcpClients', this.clients);\r\n\r\n        // Refresh the tree views\r\n        this.refreshTreeViews();\r\n    }\r\n\r\n    private refreshTreeViews() {\r\n        this.serversProvider.refresh();\r\n        this.clientsProvider.refresh();\r\n        this.updateVSCodeSettings();\r\n    }\r\n\r\n    private updateVSCodeSettings() {\r\n        try {\r\n            if (fs.existsSync(this.settingsPath)) {\r\n                let settings = JSON.parse(fs.readFileSync(this.settingsPath, 'utf8'));\r\n                \r\n                // Update settings based on clients\r\n                for (const client of this.clients) {\r\n                    // Example: add a property for each client\r\n                    settings[`mcp.client.${client.id}`] = {\r\n                        name: client.name,\r\n                        type: client.type,\r\n                        isActive: client.isActive,\r\n                        // Add other relevant client properties\r\n                    };\r\n                }\r\n                \r\n                fs.writeFileSync(this.settingsPath, JSON.stringify(settings, null, 4), 'utf8');\r\n                vscode.window.showInformationMessage('VS Code settings updated successfully.');\r\n            } else {\r\n                vscode.window.showWarningMessage('VS Code settings.json file not found.');\r\n            }\r\n        } catch (error) {\r\n            vscode.window.showErrorMessage(`Failed to update VS Code settings: ${error}`);\r\n        }\r\n    }\r\n\r\n    public async addServer() {\r\n        const serverName = await vscode.window.showInputBox({\r\n            prompt: 'Enter a name for the server',\r\n            placeHolder: 'Server Name'\r\n        });\r\n\r\n        if (!serverName) {\r\n            return;\r\n        }\r\n\r\n        const typeOptions: vscode.QuickPickItem[] = [\r\n            { label: 'process', description: 'Run a command in a terminal' },\r\n            { label: 'sse', description: 'Connect to Server-Sent Events endpoint' }\r\n        ];\r\n\r\n        const selectedType = await vscode.window.showQuickPick(typeOptions, {\r\n            placeHolder: 'Select server type'\r\n        });\r\n\r\n        if (!selectedType) {\r\n            return;\r\n        }\r\n\r\n        const serverType = selectedType.label as MCPServerType;\r\n        let command = '';\r\n        if (serverType === 'process') {\r\n            command = await vscode.window.showInputBox({\r\n                prompt: 'Enter the command to run',\r\n                placeHolder: 'Command'\r\n            }) || '';\r\n        } else if (serverType === 'sse') {\r\n            command = await vscode.window.showInputBox({\r\n                prompt: 'Enter the SSE endpoint URL',\r\n                placeHolder: 'URL'\r\n            }) || '';\r\n        }\r\n\r\n        const newServer: MCPServer = {\r\n            id: Date.now().toString(),\r\n            name: serverName,\r\n            type: serverType,\r\n            command: command,\r\n            isActive: false\r\n        };\r\n\r\n        this.servers.push(newServer);\r\n        this.saveServersAndClients();\r\n        MCPWebViewPanel.refresh();\r\n    }\r\n\r\n    public async addClient() {\r\n        const clientName = await vscode.window.showInputBox({\r\n            prompt: 'Enter a name for the client',\r\n            placeHolder: 'Client Name'\r\n        });\r\n\r\n        if (!clientName) {\r\n            return;\r\n        }\r\n\r\n        const typeOptions: vscode.QuickPickItem[] = [\r\n            { label: 'process', description: 'Run a command in a terminal' },\r\n            { label: 'sse', description: 'Connect to Server-Sent Events endpoint' }\r\n        ];\r\n\r\n        const selectedType = await vscode.window.showQuickPick(typeOptions, {\r\n            placeHolder: 'Select client type'\r\n        });\r\n\r\n        if (!selectedType) {\r\n            return;\r\n        }\r\n\r\n        const clientType = selectedType.label as MCPClientType;\r\n        let command = '';\r\n        if (clientType === 'process') {\r\n            command = await vscode.window.showInputBox({\r\n                prompt: 'Enter the command to run',\r\n                placeHolder: 'Command'\r\n            }) || '';\r\n        } else if (clientType === 'sse') {\r\n            command = await vscode.window.showInputBox({\r\n                prompt: 'Enter the SSE endpoint URL',\r\n                placeHolder: 'URL'\r\n            }) || '';\r\n        }\r\n\r\n        const newClient: MCPClient = {\r\n            id: Date.now().toString(),\r\n            name: clientName,\r\n            type: clientType,\r\n            command: command,\r\n            isActive: false\r\n        };\r\n\r\n        this.clients.push(newClient);\r\n        this.saveServersAndClients();\r\n        MCPWebViewPanel.refresh();\r\n    }\r\n\r\n    private async startProcess(name: string, command: string): Promise<vscode.Terminal | undefined> {\r\n        try {\r\n            const terminal = vscode.window.createTerminal(`MCP ${name}`);\r\n            terminal.sendText(command);\r\n            terminal.show();\r\n            return terminal;\r\n        } catch (error) {\r\n            vscode.window.showErrorMessage(`Failed to start process: ${error instanceof Error ? error.message : String(error)}`);\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    public async startServer(serverId: string) {\r\n        const server = this.servers.find(s => s.id === serverId);\r\n        if (!server) {\r\n            vscode.window.showErrorMessage(`Server with ID ${serverId} not found.`);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            if (server.type === 'process') {\r\n                const terminal = await this.startProcess(server.name, server.command);\r\n                if (terminal) {\r\n                    server.isActive = true;\r\n                }\r\n            } else if (server.type === 'sse') {\r\n                // SSE connection logic would go here\r\n                vscode.window.showInformationMessage(`SSE connection to ${server.command} established.`);\r\n                server.isActive = true;\r\n            }\r\n\r\n            this.saveServersAndClients();\r\n            MCPWebViewPanel.refresh();\r\n        } catch (error) {\r\n            vscode.window.showErrorMessage(`Failed to start server: ${error instanceof Error ? error.message : String(error)}`);\r\n        }\r\n    }\r\n\r\n    public stopServer(serverId: string) {\r\n        const server = this.servers.find(s => s.id === serverId);\r\n        if (!server) {\r\n            vscode.window.showErrorMessage(`Server with ID ${serverId} not found.`);\r\n            return;\r\n        }\r\n\r\n        // Logic to stop the server (depends on implementation)\r\n        vscode.window.showInformationMessage(`Server ${server.name} stopped.`);\r\n\r\n        server.isActive = false;\r\n        this.saveServersAndClients();\r\n        MCPWebViewPanel.refresh();\r\n    }\r\n\r\n    public startClient(clientId: string) {\r\n        const client = this.clients.find(c => c.id === clientId);\r\n        if (!client) {\r\n            vscode.window.showErrorMessage(`Client with ID ${clientId} not found.`);\r\n            return;\r\n        }\r\n\r\n        if (client.type === 'process') {\r\n            // Start the process using the command\r\n            const terminal = vscode.window.createTerminal(`MCP Client: ${client.name}`);\r\n            terminal.sendText(client.command);\r\n            terminal.show();\r\n        } else if (client.type === 'sse') {\r\n            // SSE connection logic would go here\r\n            vscode.window.showInformationMessage(`SSE connection to ${client.command} established.`);\r\n        }\r\n\r\n        client.isActive = true;\r\n        this.saveServersAndClients();\r\n        MCPWebViewPanel.refresh();\r\n    }\r\n\r\n    public stopClient(clientId: string) {\r\n        const client = this.clients.find(c => c.id === clientId);\r\n        if (!client) {\r\n            vscode.window.showErrorMessage(`Client with ID ${clientId} not found.`);\r\n            return;\r\n        }\r\n\r\n        // Logic to stop the client (depends on implementation)\r\n        vscode.window.showInformationMessage(`Client ${client.name} stopped.`);\r\n\r\n        client.isActive = false;\r\n        this.saveServersAndClients();\r\n        MCPWebViewPanel.refresh();\r\n    }\r\n\r\n    public getServers(): MCPServer[] {\r\n        return this.servers;\r\n    }\r\n\r\n    public getClients(): MCPClient[] {\r\n        return this.clients;\r\n    }\r\n\r\n    public getServersProvider(): ServerTreeDataProvider {\r\n        return this.serversProvider;\r\n    }\r\n\r\n    public getClientsProvider(): ClientTreeDataProvider {\r\n        return this.clientsProvider;\r\n    }\r\n}","import * as vscode from 'vscode';\r\nimport { MCPManager } from './mcpManager';\r\nimport { MCPWebViewPanel } from './webviews/mcpWebViewPanel';\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n    console.log('MCP Manager extension is now active!');\r\n\r\n    // Initialize the MCP Manager\r\n    const mcpManager = new MCPManager(context);\r\n\r\n    // Register commands\r\n    const showPanelCommand = vscode.commands.registerCommand('mcpManager.showPanel', () => {\r\n        MCPWebViewPanel.createOrShow(context.extensionUri, mcpManager);\r\n    });\r\n\r\n    const addServerCommand = vscode.commands.registerCommand('mcpManager.addServer', () => {\r\n        mcpManager.addServer();\r\n    });\r\n\r\n    const addClientCommand = vscode.commands.registerCommand('mcpManager.addClient', () => {\r\n        mcpManager.addClient();\r\n    });\r\n\r\n    const startServerCommand = vscode.commands.registerCommand('mcpManager.startServer', (serverId: string) => {\r\n        mcpManager.startServer(serverId);\r\n    });\r\n\r\n    const stopServerCommand = vscode.commands.registerCommand('mcpManager.stopServer', (serverId: string) => {\r\n        mcpManager.stopServer(serverId);\r\n    });\r\n\r\n    const startClientCommand = vscode.commands.registerCommand('mcpManager.startClient', (clientId: string) => {\r\n        mcpManager.startClient(clientId);\r\n    });\r\n\r\n    const stopClientCommand = vscode.commands.registerCommand('mcpManager.stopClient', (clientId: string) => {\r\n        mcpManager.stopClient(clientId);\r\n    });\r\n\r\n    // Add commands to the extension context\r\n    context.subscriptions.push(\r\n        showPanelCommand,\r\n        addServerCommand,\r\n        addClientCommand,\r\n        startServerCommand,\r\n        stopServerCommand,\r\n        startClientCommand,\r\n        stopClientCommand\r\n    );\r\n\r\n    // Create the TreeView for Servers and Clients\r\n    const serversProvider = mcpManager.getServersProvider();\r\n    const clientsProvider = mcpManager.getClientsProvider();\r\n\r\n    const serversTreeView = vscode.window.createTreeView('mcpServersView', {\r\n        treeDataProvider: serversProvider,\r\n        showCollapseAll: true\r\n    });\r\n\r\n    const clientsTreeView = vscode.window.createTreeView('mcpClientsView', {\r\n        treeDataProvider: clientsProvider,\r\n        showCollapseAll: true\r\n    });\r\n\r\n    context.subscriptions.push(serversTreeView, clientsTreeView);\r\n\r\n    // Automatically show the panel when the extension is activated\r\n    MCPWebViewPanel.createOrShow(context.extensionUri, mcpManager);\r\n}\r\n\r\nexport function deactivate() {\r\n    // Clean up resources when extension is deactivated\r\n}","module.exports = require(\"vscode\");","import * as vscode from 'vscode';\r\nimport { MCPManager } from '../mcpManager';\r\n\r\nexport class MCPWebViewPanel {\r\n    public static currentPanel: MCPWebViewPanel | undefined;\r\n    private static readonly viewType = 'mcpManager';\r\n    \r\n    private readonly _panel: vscode.WebviewPanel;\r\n    private readonly _extensionUri: vscode.Uri;\r\n    private readonly _mcpManager: MCPManager;\r\n    private _disposables: vscode.Disposable[] = [];\r\n\r\n    public static createOrShow(extensionUri: vscode.Uri, mcpManager: MCPManager) {\r\n        const column = vscode.window.activeTextEditor\r\n            ? vscode.window.activeTextEditor.viewColumn\r\n            : undefined;\r\n\r\n        // If we already have a panel, show it\r\n        if (MCPWebViewPanel.currentPanel) {\r\n            MCPWebViewPanel.currentPanel._panel.reveal(column);\r\n            return;\r\n        }\r\n\r\n        // Otherwise, create a new panel\r\n        const panel = vscode.window.createWebviewPanel(\r\n            MCPWebViewPanel.viewType,\r\n            'MCP Manager',\r\n            column || vscode.ViewColumn.One,\r\n            {\r\n                // Enable JavaScript in the webview\r\n                enableScripts: true,\r\n                // Restrict the webview to only load resources from our extension\r\n                localResourceRoots: [vscode.Uri.joinPath(extensionUri, 'resources')]\r\n            }\r\n        );\r\n\r\n        MCPWebViewPanel.currentPanel = new MCPWebViewPanel(panel, extensionUri, mcpManager);\r\n    }\r\n\r\n    public static refresh() {\r\n        if (MCPWebViewPanel.currentPanel) {\r\n            MCPWebViewPanel.currentPanel._update();\r\n        }\r\n    }\r\n\r\n    private constructor(panel: vscode.WebviewPanel, extensionUri: vscode.Uri, mcpManager: MCPManager) {\r\n        this._panel = panel;\r\n        this._extensionUri = extensionUri;\r\n        this._mcpManager = mcpManager;\r\n\r\n        // Set the webview's initial html content\r\n        this._update();\r\n\r\n        // Listen for when the panel is disposed\r\n        // This happens when the user closes the panel or when the panel is closed programmatically\r\n        this._panel.onDidDispose(() => this.dispose(), null, this._disposables);\r\n\r\n        // Update the content based on view changes\r\n        this._panel.onDidChangeViewState(\r\n            e => {\r\n                if (this._panel.visible) {\r\n                    this._update();\r\n                }\r\n            },\r\n            null,\r\n            this._disposables\r\n        );\r\n\r\n        // Handle messages from the webview\r\n        this._panel.webview.onDidReceiveMessage(\r\n            async message => {\r\n                switch (message.command) {\r\n                    case 'addServer':\r\n                        await this._mcpManager.addServer();\r\n                        break;\r\n                    case 'addClient':\r\n                        await this._mcpManager.addClient();\r\n                        break;\r\n                    case 'startServer':\r\n                        this._mcpManager.startServer(message.serverId);\r\n                        break;\r\n                    case 'stopServer':\r\n                        this._mcpManager.stopServer(message.serverId);\r\n                        break;\r\n                    case 'startClient':\r\n                        this._mcpManager.startClient(message.clientId);\r\n                        break;\r\n                    case 'stopClient':\r\n                        this._mcpManager.stopClient(message.clientId);\r\n                        break;\r\n                }\r\n            },\r\n            null,\r\n            this._disposables\r\n        );\r\n    }\r\n\r\n    public dispose() {\r\n        MCPWebViewPanel.currentPanel = undefined;\r\n\r\n        // Clean up our resources\r\n        this._panel.dispose();\r\n\r\n        while (this._disposables.length) {\r\n            const x = this._disposables.pop();\r\n            if (x) {\r\n                x.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _update() {\r\n        const webview = this._panel.webview;\r\n        this._panel.title = 'MCP Manager';\r\n        this._panel.webview.html = this._getHtmlForWebview(webview);\r\n    }\r\n\r\n    private _getHtmlForWebview(webview: vscode.Webview) {\r\n        const servers = this._mcpManager.getServers();\r\n        const clients = this._mcpManager.getClients();\r\n\r\n        // Create HTML representation of servers\r\n        const serversHtml = servers.map(server => {\r\n            return `\r\n                <div class=\"mcp-item ${server.isActive ? 'active' : ''}\">\r\n                    <div class=\"mcp-item-header\">\r\n                        <span class=\"mcp-item-name\">${server.name}</span>\r\n                        <span class=\"mcp-item-type\">${server.type}</span>\r\n                        <span class=\"mcp-item-status\">${server.isActive ? 'Running' : 'Stopped'}</span>\r\n                    </div>\r\n                    <div class=\"mcp-item-details\">\r\n                        <div class=\"mcp-item-command\">${server.command}</div>\r\n                        <button class=\"mcp-action-button ${server.isActive ? 'stop' : 'start'}\" \r\n                                onclick=\"handleServerAction('${server.id}', ${server.isActive})\">\r\n                            ${server.isActive ? 'Stop' : 'Start'}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            `;\r\n        }).join('');\r\n\r\n        // Create HTML representation of clients\r\n        const clientsHtml = clients.map(client => {\r\n            return `\r\n                <div class=\"mcp-item ${client.isActive ? 'active' : ''}\">\r\n                    <div class=\"mcp-item-header\">\r\n                        <span class=\"mcp-item-name\">${client.name}</span>\r\n                        <span class=\"mcp-item-type\">${client.type}</span>\r\n                        <span class=\"mcp-item-status\">${client.isActive ? 'Running' : 'Stopped'}</span>\r\n                    </div>\r\n                    <div class=\"mcp-item-details\">\r\n                        <div class=\"mcp-item-command\">${client.command}</div>\r\n                        <button class=\"mcp-action-button ${client.isActive ? 'stop' : 'start'}\" \r\n                                onclick=\"handleClientAction('${client.id}', ${client.isActive})\">\r\n                            ${client.isActive ? 'Stop' : 'Start'}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            `;\r\n        }).join('');\r\n\r\n        return `<!DOCTYPE html>\r\n            <html lang=\"en\">\r\n            <head>\r\n                <meta charset=\"UTF-8\">\r\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n                <title>MCP Manager</title>\r\n                <style>\r\n                    :root {\r\n                        --container-padding: 20px;\r\n                        --input-padding-vertical: 6px;\r\n                        --input-padding-horizontal: 12px;\r\n                        --input-margin-vertical: 4px;\r\n                        --input-margin-horizontal: 0;\r\n                    }\r\n\r\n                    body {\r\n                        padding: 0;\r\n                        margin: 0;\r\n                        color: var(--vscode-foreground);\r\n                        font-size: var(--vscode-font-size);\r\n                        font-weight: var(--vscode-font-weight);\r\n                        font-family: var(--vscode-font-family);\r\n                        background-color: var(--vscode-editor-background);\r\n                    }\r\n\r\n                    .container {\r\n                        display: flex;\r\n                        flex-direction: column;\r\n                        height: 100vh;\r\n                        max-width: 1200px;\r\n                        margin: 0 auto;\r\n                        padding: var(--container-padding);\r\n                    }\r\n\r\n                    .header {\r\n                        display: flex;\r\n                        justify-content: space-between;\r\n                        align-items: center;\r\n                        margin-bottom: 20px;\r\n                    }\r\n\r\n                    .header h1 {\r\n                        margin: 0;\r\n                        padding: 0;\r\n                    }\r\n\r\n                    .panels-container {\r\n                        display: flex;\r\n                        flex-direction: column;\r\n                        flex-grow: 1;\r\n                        overflow: hidden;\r\n                        border: 1px solid var(--vscode-widget-border);\r\n                        border-radius: 4px;\r\n                    }\r\n\r\n                    .panel {\r\n                        flex: 1;\r\n                        padding: 10px;\r\n                        overflow-y: auto;\r\n                    }\r\n\r\n                    .panel-header {\r\n                        display: flex;\r\n                        justify-content: space-between;\r\n                        align-items: center;\r\n                        margin-bottom: 10px;\r\n                        padding-bottom: 5px;\r\n                        border-bottom: 1px solid var(--vscode-widget-border);\r\n                    }\r\n\r\n                    .divider {\r\n                        height: 1px;\r\n                        background-color: var(--vscode-widget-border);\r\n                    }\r\n\r\n                    .mcp-item {\r\n                        margin-bottom: 10px;\r\n                        padding: 10px;\r\n                        border-radius: 4px;\r\n                        background-color: var(--vscode-editor-inactiveSelectionBackground);\r\n                    }\r\n\r\n                    .mcp-item.active {\r\n                        background-color: var(--vscode-editor-selectionBackground);\r\n                    }\r\n\r\n                    .mcp-item-header {\r\n                        display: flex;\r\n                        justify-content: space-between;\r\n                        align-items: center;\r\n                        margin-bottom: 5px;\r\n                    }\r\n\r\n                    .mcp-item-details {\r\n                        display: flex;\r\n                        justify-content: space-between;\r\n                        align-items: center;\r\n                    }\r\n\r\n                    .mcp-item-command {\r\n                        font-family: var(--vscode-editor-font-family);\r\n                        font-size: var(--vscode-editor-font-size);\r\n                        color: var(--vscode-textPreformat-foreground);\r\n                        background-color: var(--vscode-textBlockQuote-background);\r\n                        padding: 2px 6px;\r\n                        border-radius: 2px;\r\n                        overflow: hidden;\r\n                        text-overflow: ellipsis;\r\n                        max-width: 70%;\r\n                    }\r\n\r\n                    .mcp-action-button {\r\n                        padding: var(--input-padding-vertical) var(--input-padding-horizontal);\r\n                        border: none;\r\n                        border-radius: 2px;\r\n                        font-size: var(--vscode-font-size);\r\n                        cursor: pointer;\r\n                    }\r\n\r\n                    .mcp-action-button.start {\r\n                        background-color: var(--vscode-button-background);\r\n                        color: var(--vscode-button-foreground);\r\n                    }\r\n\r\n                    .mcp-action-button.stop {\r\n                        background-color: var(--vscode-editorError-foreground);\r\n                        color: var(--vscode-button-foreground);\r\n                    }\r\n\r\n                    .add-button {\r\n                        padding: var(--input-padding-vertical) var(--input-padding-horizontal);\r\n                        border: none;\r\n                        border-radius: 2px;\r\n                        font-size: var(--vscode-font-size);\r\n                        background-color: var(--vscode-button-background);\r\n                        color: var(--vscode-button-foreground);\r\n                        cursor: pointer;\r\n                    }\r\n\r\n                    .empty-message {\r\n                        padding: 20px;\r\n                        text-align: center;\r\n                        color: var(--vscode-descriptionForeground);\r\n                    }\r\n\r\n                    @media (min-width: 768px) {\r\n                        .panels-container {\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        .divider {\r\n                            width: 1px;\r\n                            height: auto;\r\n                        }\r\n                    }\r\n                </style>\r\n            </head>\r\n            <body>\r\n                <div class=\"container\">\r\n                    <div class=\"header\">\r\n                        <h1>MCP Manager</h1>\r\n                    </div>\r\n                    <div class=\"panels-container\">\r\n                        <div class=\"panel\">\r\n                            <div class=\"panel-header\">\r\n                                <h2>Servers</h2>\r\n                                <button class=\"add-button\" onclick=\"addServer()\">Add Server</button>\r\n                            </div>\r\n                            <div class=\"panel-content\">\r\n                                ${serversHtml || '<div class=\"empty-message\">No servers added yet.</div>'}\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"divider\"></div>\r\n                        <div class=\"panel\">\r\n                            <div class=\"panel-header\">\r\n                                <h2>Clients</h2>\r\n                                <button class=\"add-button\" onclick=\"addClient()\">Add Client</button>\r\n                            </div>\r\n                            <div class=\"panel-content\">\r\n                                ${clientsHtml || '<div class=\"empty-message\">No clients added yet.</div>'}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <script>\r\n                    const vscode = acquireVsCodeApi();\r\n\r\n                    function addServer() {\r\n                        vscode.postMessage({\r\n                            command: 'addServer'\r\n                        });\r\n                    }\r\n\r\n                    function addClient() {\r\n                        vscode.postMessage({\r\n                            command: 'addClient'\r\n                        });\r\n                    }\r\n\r\n                    function handleServerAction(serverId, isActive) {\r\n                        vscode.postMessage({\r\n                            command: isActive ? 'stopServer' : 'startServer',\r\n                            serverId: serverId\r\n                        });\r\n                    }\r\n\r\n                    function handleClientAction(clientId, isActive) {\r\n                        vscode.postMessage({\r\n                            command: isActive ? 'stopClient' : 'startClient',\r\n                            clientId: clientId\r\n                        });\r\n                    }\r\n                </script>\r\n            </body>\r\n            </html>`;\r\n    }\r\n}","import * as vscode from 'vscode';\r\nimport { MCPManager } from '../mcpManager';\r\nimport { MCPServer } from '../models/mcpServer';\r\n\r\nexport class ServerTreeDataProvider implements vscode.TreeDataProvider<ServerTreeItem> {\r\n    private _onDidChangeTreeData: vscode.EventEmitter<ServerTreeItem | undefined | null | void> = new vscode.EventEmitter<ServerTreeItem | undefined | null | void>();\r\n    readonly onDidChangeTreeData: vscode.Event<ServerTreeItem | undefined | null | void> = this._onDidChangeTreeData.event;\r\n    \r\n    constructor(private mcpManager: MCPManager) {}\r\n\r\n    refresh(): void {\r\n        this._onDidChangeTreeData.fire();\r\n    }\r\n\r\n    getTreeItem(element: ServerTreeItem): vscode.TreeItem {\r\n        return element;\r\n    }\r\n\r\n    getChildren(element?: ServerTreeItem): Thenable<ServerTreeItem[]> {\r\n        if (!element) {\r\n            // Root level - return all servers\r\n            const servers = this.mcpManager.getServers();\r\n            return Promise.resolve(\r\n                servers.map(server => new ServerTreeItem(\r\n                    server,\r\n                    server.name,\r\n                    vscode.TreeItemCollapsibleState.None,\r\n                    {\r\n                        title: server.isActive ? 'Stop Server' : 'Start Server',\r\n                        command: server.isActive ? 'mcpManager.stopServer' : 'mcpManager.startServer',\r\n                        arguments: [server.id]\r\n                    }\r\n                ))\r\n            );\r\n        }\r\n        \r\n        return Promise.resolve([]);\r\n    }\r\n}\r\n\r\nexport class ServerTreeItem extends vscode.TreeItem {\r\n    constructor(\r\n        public readonly server: MCPServer,\r\n        public readonly label: string,\r\n        public readonly collapsibleState: vscode.TreeItemCollapsibleState,\r\n        public readonly command?: vscode.Command\r\n    ) {\r\n        super(label, collapsibleState);\r\n        \r\n        this.tooltip = `Type: ${server.type} | Command: ${server.command}`;\r\n        this.description = server.isActive ? 'Running' : 'Stopped';\r\n        this.iconPath = server.isActive ? \r\n            new vscode.ThemeIcon('play') :\r\n            new vscode.ThemeIcon('stop');\r\n        this.contextValue = 'mcpServer';\r\n    }\r\n}","module.exports = require(\"os\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["constructor","mcpManager","_onDidChangeTreeData","vscode","EventEmitter","onDidChangeTreeData","this","event","refresh","fire","getTreeItem","element","getChildren","clients","getClients","Promise","resolve","map","client","ClientTreeItem","name","TreeItemCollapsibleState","None","title","isActive","command","arguments","id","TreeItem","label","collapsibleState","super","tooltip","type","description","iconPath","ThemeIcon","contextValue","context","servers","serversProvider","ServerTreeDataProvider","clientsProvider","ClientTreeDataProvider","settingsPath","path","join","os","homedir","process","platform","loadServersAndClients","storedServers","globalState","get","storedClients","refreshTreeViews","saveServersAndClients","update","updateVSCodeSettings","fs","existsSync","settings","JSON","parse","readFileSync","writeFileSync","stringify","window","showInformationMessage","showWarningMessage","error","showErrorMessage","addServer","serverName","showInputBox","prompt","placeHolder","selectedType","showQuickPick","serverType","newServer","Date","now","toString","push","MCPWebViewPanel","addClient","clientName","clientType","newClient","startProcess","terminal","createTerminal","sendText","show","Error","message","String","startServer","serverId","server","find","s","stopServer","startClient","clientId","c","stopClient","getServers","getServersProvider","getClientsProvider","console","log","MCPManager","showPanelCommand","commands","registerCommand","createOrShow","extensionUri","addServerCommand","addClientCommand","startServerCommand","stopServerCommand","startClientCommand","stopClientCommand","subscriptions","serversTreeView","createTreeView","treeDataProvider","showCollapseAll","clientsTreeView","module","exports","require","column","activeTextEditor","viewColumn","undefined","currentPanel","_panel","reveal","panel","createWebviewPanel","viewType","ViewColumn","One","enableScripts","localResourceRoots","Uri","joinPath","_update","_disposables","_extensionUri","_mcpManager","onDidDispose","dispose","onDidChangeViewState","e","visible","webview","onDidReceiveMessage","async","length","x","pop","html","_getHtmlForWebview","ServerTreeItem","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}