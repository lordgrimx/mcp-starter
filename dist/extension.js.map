{"version":3,"file":"extension.js","mappings":"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","sources":[".././src/providers/clientTreeDataProvider.ts",".././src/mcpManager.ts",".././src/extension.ts","../external commonjs \"vscode\"",".././src/webviews/mcpWebViewPanel.ts",".././src/providers/serverTreeDataProvider.ts","../external node-commonjs \"os\"","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\r\nimport { MCPManager } from '../mcpManager';\r\nimport { MCPClient } from '../models/mcpClient';\r\n\r\nexport class ClientTreeDataProvider implements vscode.TreeDataProvider<ClientTreeItem> {\r\n    private _onDidChangeTreeData: vscode.EventEmitter<ClientTreeItem | undefined | null | void> = new vscode.EventEmitter<ClientTreeItem | undefined | null | void>();\r\n    readonly onDidChangeTreeData: vscode.Event<ClientTreeItem | undefined | null | void> = this._onDidChangeTreeData.event;\r\n    \r\n    constructor(private mcpManager: MCPManager) {}\r\n\r\n    refresh(): void {\r\n        this._onDidChangeTreeData.fire();\r\n    }\r\n\r\n    getTreeItem(element: ClientTreeItem): vscode.TreeItem {\r\n        return element;\r\n    }\r\n\r\n    getChildren(element?: ClientTreeItem): Thenable<ClientTreeItem[]> {\r\n        if (!element) {\r\n            // Root level - return all clients\r\n            const clients = this.mcpManager.getClients();\r\n            return Promise.resolve(\r\n                clients.map(client => new ClientTreeItem(\r\n                    client,\r\n                    client.name,\r\n                    vscode.TreeItemCollapsibleState.None,\r\n                    {\r\n                        title: client.isActive ? 'Stop Client' : 'Start Client',\r\n                        command: client.isActive ? 'mcpManager.stopClient' : 'mcpManager.startClient',\r\n                        arguments: [client.id]\r\n                    }\r\n                ))\r\n            );\r\n        }\r\n        \r\n        return Promise.resolve([]);\r\n    }\r\n}\r\n\r\nexport class ClientTreeItem extends vscode.TreeItem {\r\n    constructor(\r\n        public readonly client: MCPClient,\r\n        public readonly label: string,\r\n        public readonly collapsibleState: vscode.TreeItemCollapsibleState,\r\n        public readonly command?: vscode.Command\r\n    ) {\r\n        super(label, collapsibleState);\r\n        \r\n        this.tooltip = `Type: ${client.type} | Command: ${client.command}`;\r\n        this.description = client.isActive ? 'Running' : 'Stopped';\r\n        this.iconPath = client.isActive ? \r\n            new vscode.ThemeIcon('play') :\r\n            new vscode.ThemeIcon('stop');\r\n        this.contextValue = 'mcpClient';\r\n    }\r\n}","import * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport * as os from 'os';\r\nimport { WebSocket, WebSocketServer } from 'ws';\r\nimport { ServerTreeDataProvider } from './providers/serverTreeDataProvider';\r\nimport { ClientTreeDataProvider } from './providers/clientTreeDataProvider';\r\nimport { MCPServer, MCPServerType } from './models/mcpServer';\r\nimport { MCPClient, MCPClientType } from './models/mcpClient';\r\nimport { MCPWebViewPanel } from './webviews/mcpWebViewPanel';\r\n\r\ninterface MCPConfigSettings {\r\n    \"mcpmanager.servers\": Array<{\r\n        name: string;\r\n        type: MCPServerType;\r\n        isActive: boolean;\r\n        command: string;\r\n        id: string;\r\n    }>;\r\n    \"mcpmanager.clients\": Array<{\r\n        name: string;\r\n        type: MCPClientType;\r\n        isActive: boolean;\r\n        command: string;\r\n        id: string;\r\n    }>;\r\n    [key: string]: any;\r\n}\r\n\r\nexport class MCPManager {\r\n    private servers: MCPServer[] = [];\r\n    private clients: MCPClient[] = [];\r\n    private context: vscode.ExtensionContext;\r\n    private serversProvider: ServerTreeDataProvider;\r\n    private clientsProvider: ClientTreeDataProvider;\r\n    private settingsPath: string;\r\n    private activeTerminals: Map<string, vscode.Terminal> = new Map();\r\n\r\n    constructor(context: vscode.ExtensionContext) {\r\n        this.context = context;\r\n        this.serversProvider = new ServerTreeDataProvider(this);\r\n        this.clientsProvider = new ClientTreeDataProvider(this);\r\n        \r\n        // Platform-independent settings path\r\n        this.settingsPath = path.join(\r\n            os.homedir(),\r\n            process.platform === 'darwin' \r\n                ? 'Library/Application Support/Code/User/settings.json'\r\n                : process.platform === 'linux'\r\n                    ? '.config/Code/User/settings.json'\r\n                    : 'AppData/Roaming/Code/User/settings.json'\r\n        );\r\n        \r\n        this.loadServersAndClients();\r\n    }\r\n\r\n    private loadServersAndClients() {\r\n        try {\r\n            if (fs.existsSync(this.settingsPath)) {\r\n                const fileContent = fs.readFileSync(this.settingsPath, 'utf8');\r\n                const settings = JSON.parse(fileContent) as MCPConfigSettings;\r\n\r\n                // Load servers from settings\r\n                const savedServers = settings[\"mcpmanager.servers\"] || [];\r\n                this.servers = savedServers.map(s => ({\r\n                    id: s.id,\r\n                    name: s.name,\r\n                    type: s.type,\r\n                    command: s.command,\r\n                    isActive: false // Always start as inactive\r\n                }));\r\n\r\n                // Load clients from settings\r\n                const savedClients = settings[\"mcpmanager.clients\"] || [];\r\n                this.clients = savedClients.map(c => ({\r\n                    id: c.id,\r\n                    name: c.name,\r\n                    type: c.type,\r\n                    command: c.command,\r\n                    isActive: false // Always start as inactive\r\n                }));\r\n            }\r\n        } catch (error) {\r\n            // If there's an error reading settings, try loading from extension storage\r\n            const storedServers = this.context.globalState.get<MCPServer[]>('mcpServers', []);\r\n            const storedClients = this.context.globalState.get<MCPClient[]>('mcpClients', []);\r\n\r\n            this.servers = storedServers;\r\n            this.clients = storedClients;\r\n        }\r\n\r\n        // Refresh the tree views\r\n        this.refreshTreeViews();\r\n    }\r\n\r\n    private saveServersAndClients() {\r\n        // Save to storage\r\n        this.context.globalState.update('mcpServers', this.servers);\r\n        this.context.globalState.update('mcpClients', this.clients);\r\n\r\n        // Refresh the tree views\r\n        this.refreshTreeViews();\r\n    }\r\n\r\n    private refreshTreeViews() {\r\n        this.serversProvider.refresh();\r\n        this.clientsProvider.refresh();\r\n        this.updateVSCodeSettings();\r\n    }\r\n\r\n    private updateVSCodeSettings() {\r\n        try {\r\n            // Update workspace settings instead of user settings\r\n            const config = vscode.workspace.getConfiguration('mcpmanager');\r\n            \r\n            config.update('servers', this.servers, vscode.ConfigurationTarget.Workspace);\r\n            config.update('clients', this.clients, vscode.ConfigurationTarget.Workspace);\r\n            \r\n        } catch (error) {\r\n            vscode.window.showErrorMessage(`Failed to update VS Code settings: ${error instanceof Error ? error.message : String(error)}`);\r\n        }\r\n    }\r\n\r\n    public async addServer(data?: { name: string; type: MCPServerType; command: string }) {\r\n        if (data) {\r\n            const newServer: MCPServer = {\r\n                id: Date.now().toString(),\r\n                name: data.name,\r\n                type: data.type,\r\n                command: data.command,\r\n                isActive: false\r\n            };\r\n\r\n            this.servers.push(newServer);\r\n            this.saveServersAndClients();\r\n            MCPWebViewPanel.refresh();\r\n            return;\r\n        }\r\n        const serverName = await vscode.window.showInputBox({\r\n            prompt: 'Enter a name for the server',\r\n            placeHolder: 'Server Name'\r\n        });\r\n\r\n        if (!serverName) {\r\n            return;\r\n        }\r\n\r\n        const typeOptions: vscode.QuickPickItem[] = [\r\n            { label: 'process', description: 'Run a command in a terminal' },\r\n            { label: 'sse', description: 'Connect to Server-Sent Events endpoint' }\r\n        ];\r\n\r\n        const selectedType = await vscode.window.showQuickPick(typeOptions, {\r\n            placeHolder: 'Select server type'\r\n        });\r\n\r\n        if (!selectedType) {\r\n            return;\r\n        }\r\n\r\n        const serverType = selectedType.label as MCPServerType;\r\n        let command = '';\r\n        if (serverType === 'process') {\r\n            command = await vscode.window.showInputBox({\r\n                prompt: 'Enter the command to run',\r\n                placeHolder: 'Command'\r\n            }) || '';\r\n        } else if (serverType === 'sse') {\r\n            command = await vscode.window.showInputBox({\r\n                prompt: 'Enter the SSE endpoint URL',\r\n                placeHolder: 'URL'\r\n            }) || '';\r\n        }\r\n\r\n        const newServer: MCPServer = {\r\n            id: Date.now().toString(),\r\n            name: serverName,\r\n            type: serverType,\r\n            command: command,\r\n            isActive: false\r\n        };\r\n\r\n        this.servers.push(newServer);\r\n        this.saveServersAndClients();\r\n        MCPWebViewPanel.refresh();\r\n    }\r\n\r\n    public async addClient(data?: { name: string; type: MCPClientType; command: string }) {\r\n        if (data) {\r\n            const newClient: MCPClient = {\r\n                id: Date.now().toString(),\r\n                name: data.name,\r\n                type: data.type,\r\n                command: data.command,\r\n                isActive: false\r\n            };\r\n\r\n            this.clients.push(newClient);\r\n            this.saveServersAndClients();\r\n            MCPWebViewPanel.refresh();\r\n            return;\r\n        }\r\n        const clientName = await vscode.window.showInputBox({\r\n            prompt: 'Enter a name for the client',\r\n            placeHolder: 'Client Name'\r\n        });\r\n\r\n        if (!clientName) {\r\n            return;\r\n        }\r\n\r\n        const typeOptions: vscode.QuickPickItem[] = [\r\n            { label: 'process', description: 'Run a command in a terminal' },\r\n            { label: 'sse', description: 'Connect to Server-Sent Events endpoint' }\r\n        ];\r\n\r\n        const selectedType = await vscode.window.showQuickPick(typeOptions, {\r\n            placeHolder: 'Select client type'\r\n        });\r\n\r\n        if (!selectedType) {\r\n            return;\r\n        }\r\n\r\n        const clientType = selectedType.label as MCPClientType;\r\n        let command = '';\r\n        if (clientType === 'process') {\r\n            command = await vscode.window.showInputBox({\r\n                prompt: 'Enter the command to run',\r\n                placeHolder: 'Command'\r\n            }) || '';\r\n        } else if (clientType === 'sse') {\r\n            command = await vscode.window.showInputBox({\r\n                prompt: 'Enter the SSE endpoint URL',\r\n                placeHolder: 'URL'\r\n            }) || '';\r\n        }\r\n\r\n        const newClient: MCPClient = {\r\n            id: Date.now().toString(),\r\n            name: clientName,\r\n            type: clientType,\r\n            command: command,\r\n            isActive: false\r\n        };\r\n\r\n        this.clients.push(newClient);\r\n        this.saveServersAndClients();\r\n        MCPWebViewPanel.refresh();\r\n    }\r\n\r\n    public editServer(data: { id: string; name: string; type: MCPServerType; command: string }) {\r\n        const serverIndex = this.servers.findIndex(s => s.id === data.id);\r\n        if (serverIndex === -1) {\r\n            vscode.window.showErrorMessage(`Server with ID ${data.id} not found.`);\r\n            return;\r\n        }\r\n\r\n        const isActive = this.servers[serverIndex].isActive;\r\n        this.servers[serverIndex] = {\r\n            ...data,\r\n            isActive\r\n        };\r\n\r\n        this.saveServersAndClients();\r\n        MCPWebViewPanel.refresh();\r\n    }\r\n\r\n    public editClient(data: { id: string; name: string; type: MCPClientType; command: string }) {\r\n        const clientIndex = this.clients.findIndex(c => c.id === data.id);\r\n        if (clientIndex === -1) {\r\n            vscode.window.showErrorMessage(`Client with ID ${data.id} not found.`);\r\n            return;\r\n        }\r\n\r\n        const isActive = this.clients[clientIndex].isActive;\r\n        this.clients[clientIndex] = {\r\n            ...data,\r\n            isActive\r\n        };\r\n\r\n        this.saveServersAndClients();\r\n        MCPWebViewPanel.refresh();\r\n    }\r\n\r\n    public deleteServer(serverId: string) {\r\n        const serverIndex = this.servers.findIndex(s => s.id === serverId);\r\n        if (serverIndex === -1) {\r\n            vscode.window.showErrorMessage(`Server with ID ${serverId} not found.`);\r\n            return;\r\n        }\r\n\r\n        if (this.servers[serverIndex].isActive) {\r\n            this.stopServer(serverId);\r\n        }\r\n\r\n        this.servers.splice(serverIndex, 1);\r\n        this.saveServersAndClients();\r\n        MCPWebViewPanel.refresh();\r\n    }\r\n\r\n    public deleteClient(clientId: string) {\r\n        const clientIndex = this.clients.findIndex(c => c.id === clientId);\r\n        if (clientIndex === -1) {\r\n            vscode.window.showErrorMessage(`Client with ID ${clientId} not found.`);\r\n            return;\r\n        }\r\n\r\n        if (this.clients[clientIndex].isActive) {\r\n            this.stopClient(clientId);\r\n        }\r\n\r\n        this.clients.splice(clientIndex, 1);\r\n        this.saveServersAndClients();\r\n        MCPWebViewPanel.refresh();\r\n    }\r\n\r\n    public getServerDetails(serverId: string) {\r\n        return this.servers.find(s => s.id === serverId);\r\n    }\r\n\r\n    public getClientDetails(clientId: string) {\r\n        return this.clients.find(c => c.id === clientId);\r\n    }\r\n\r\n    private async startProcess(name: string, command: string): Promise<vscode.Terminal | undefined> {\r\n        try {\r\n            const terminal = vscode.window.createTerminal(`MCP ${name}`);\r\n            terminal.sendText(command);\r\n            terminal.show();\r\n            return terminal;\r\n        } catch (error) {\r\n            vscode.window.showErrorMessage(`Failed to start process: ${error instanceof Error ? error.message : String(error)}`);\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    public async startServer(serverId: string) {\r\n        const server = this.servers.find(s => s.id === serverId);\r\n        if (!server) {\r\n            vscode.window.showErrorMessage(`Server with ID ${serverId} not found.`);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            if (server.type === 'process') {\r\n                const terminal = await this.startProcess(server.name, server.command);\r\n                if (terminal) {\r\n                    server.isActive = true;\r\n                    this.activeTerminals.set(serverId, terminal);\r\n                }\r\n            } else if (server.type === 'sse') {\r\n                // WebSocket server implementation\r\n                const wsScript = `\r\n                    const WebSocket = require('ws');\r\n                    const port = ${server.command.split(':')[1] || 3000};\r\n                    \r\n                    const wss = new WebSocket.Server({ port });\r\n                    console.log(\\`WebSocket Server running on ws://localhost:\\${port}\\`);\r\n                    \r\n                    wss.on('connection', (ws) => {\r\n                        console.log('New connection established');\r\n                        \r\n                        // Send welcome message\r\n                        ws.send(JSON.stringify({ type: 'connected', message: 'Server ready' }));\r\n                        \r\n                        // Setup heartbeat\r\n                        const heartbeat = setInterval(() => {\r\n                            if (ws.readyState === WebSocket.OPEN) {\r\n                                ws.send(JSON.stringify({ type: 'heartbeat', message: 'ping' }));\r\n                            }\r\n                        }, 5000);\r\n                        \r\n                        ws.on('message', (data) => {\r\n                            try {\r\n                                const message = JSON.parse(data.toString());\r\n                                console.log('Received:', message);\r\n                            } catch (e) {\r\n                                console.log('Received raw message:', data.toString());\r\n                            }\r\n                        });\r\n                        \r\n                        ws.on('close', () => {\r\n                            console.log('Client disconnected');\r\n                            clearInterval(heartbeat);\r\n                        });\r\n                        \r\n                        ws.on('error', (error) => {\r\n                            console.error('WebSocket error:', error);\r\n                        });\r\n                    });\r\n                    \r\n                    process.on('SIGINT', () => {\r\n                        wss.close(() => {\r\n                            console.log('Server closed');\r\n                            process.exit();\r\n                        });\r\n                    });\r\n                `;\r\n                \r\n                const terminal = await this.startProcess(server.name, `node -e \"${wsScript.replace(/\\n\\s+/g, ' ')}\"`);\r\n                if (terminal) {\r\n                    server.isActive = true;\r\n                    this.activeTerminals.set(serverId, terminal);\r\n                }\r\n            }\r\n\r\n            this.saveServersAndClients();\r\n            MCPWebViewPanel.refresh();\r\n        } catch (error) {\r\n            vscode.window.showErrorMessage(`Failed to start server: ${error instanceof Error ? error.message : String(error)}`);\r\n        }\r\n    }\r\n\r\n    public stopServer(serverId: string) {\r\n        const server = this.servers.find(s => s.id === serverId);\r\n        if (!server) {\r\n            vscode.window.showErrorMessage(`Server with ID ${serverId} not found.`);\r\n            return;\r\n        }\r\n\r\n        const terminal = this.activeTerminals.get(serverId);\r\n        if (terminal) {\r\n            terminal.dispose(); // Kill the terminal\r\n            this.activeTerminals.delete(serverId);\r\n        }\r\n\r\n        server.isActive = false;\r\n        this.saveServersAndClients();\r\n        MCPWebViewPanel.refresh();\r\n    }\r\n\r\n    public async startClient(clientId: string) {\r\n        const client = this.clients.find(c => c.id === clientId);\r\n        if (!client) {\r\n            vscode.window.showErrorMessage(`Client with ID ${clientId} not found.`);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            if (client.type === 'process') {\r\n                const terminal = await this.startProcess(client.name, client.command);\r\n                if (terminal) {\r\n                    client.isActive = true;\r\n                    this.activeTerminals.set(clientId, terminal);\r\n                }\r\n            } else if (client.type === 'sse') {\r\n                // Use the SSE client script from the workspace\r\n                const scriptPath = path.join(this.context.extensionPath, 'dist', 'scripts', 'wsClient.js');\r\n                if (!fs.existsSync(scriptPath)) {\r\n                    vscode.window.showErrorMessage(`SSE client script not found at ${scriptPath}`);\r\n                    return;\r\n                }\r\n\r\n                // Ensure eventsource-parser is installed\r\n                if (!fs.existsSync(path.join(this.context.extensionPath, 'node_modules', 'eventsource-parser'))) {\r\n                    const npmInstall = await this.startProcess('npm install', 'npm install eventsource-parser');\r\n                    if (npmInstall) {\r\n                        await new Promise<void>((resolve) => {\r\n                            npmInstall.processId.then(pid => {\r\n                                if (pid) {\r\n                                    const interval = setInterval(() => {\r\n                                        if (fs.existsSync(path.join(this.context.extensionPath, 'node_modules', 'eventsource-parser'))) {\r\n                                            clearInterval(interval);\r\n                                            resolve();\r\n                                        }\r\n                                    }, 1000);\r\n                                }\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n\r\n                const terminal = await this.startProcess(client.name, `node \"${scriptPath}\" \"${client.command}\"`);\r\n                if (terminal) {\r\n                    client.isActive = true;\r\n                    this.activeTerminals.set(clientId, terminal);\r\n                }\r\n            }\r\n\r\n            this.saveServersAndClients();\r\n            MCPWebViewPanel.refresh();\r\n        } catch (error) {\r\n            vscode.window.showErrorMessage(`Failed to start client: ${error instanceof Error ? error.message : String(error)}`);\r\n        }\r\n    }\r\n\r\n    public stopClient(clientId: string) {\r\n        const client = this.clients.find(c => c.id === clientId);\r\n        if (!client) {\r\n            vscode.window.showErrorMessage(`Client with ID ${clientId} not found.`);\r\n            return;\r\n        }\r\n\r\n        const terminal = this.activeTerminals.get(clientId);\r\n        if (terminal) {\r\n            terminal.dispose(); // Kill the terminal\r\n            this.activeTerminals.delete(clientId);\r\n        }\r\n\r\n        client.isActive = false;\r\n        this.saveServersAndClients();\r\n        MCPWebViewPanel.refresh();\r\n    }\r\n\r\n    public getServers(): MCPServer[] {\r\n        return this.servers;\r\n    }\r\n\r\n    public getClients(): MCPClient[] {\r\n        return this.clients;\r\n    }\r\n\r\n    public getServersProvider(): ServerTreeDataProvider {\r\n        return this.serversProvider;\r\n    }\r\n\r\n    public getClientsProvider(): ClientTreeDataProvider {\r\n        return this.clientsProvider;\r\n    }\r\n}","import * as vscode from 'vscode';\r\nimport { MCPManager } from './mcpManager';\r\nimport { MCPWebViewPanel } from './webviews/mcpWebViewPanel';\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n    console.log('MCP Manager extension is now active!');\r\n\r\n    // Initialize the MCP Manager\r\n    const mcpManager = new MCPManager(context);\r\n\r\n    // Register commands\r\n    const showPanelCommand = vscode.commands.registerCommand('mcpManager.showPanel', () => {\r\n        MCPWebViewPanel.createOrShow(context.extensionUri, mcpManager);\r\n    });\r\n\r\n    const addServerCommand = vscode.commands.registerCommand('mcpManager.addServer', () => {\r\n        mcpManager.addServer();\r\n    });\r\n\r\n    const addClientCommand = vscode.commands.registerCommand('mcpManager.addClient', () => {\r\n        mcpManager.addClient();\r\n    });\r\n\r\n    const startServerCommand = vscode.commands.registerCommand('mcpManager.startServer', (serverId: string) => {\r\n        mcpManager.startServer(serverId);\r\n    });\r\n\r\n    const stopServerCommand = vscode.commands.registerCommand('mcpManager.stopServer', (serverId: string) => {\r\n        mcpManager.stopServer(serverId);\r\n    });\r\n\r\n    const startClientCommand = vscode.commands.registerCommand('mcpManager.startClient', (clientId: string) => {\r\n        mcpManager.startClient(clientId);\r\n    });\r\n\r\n    const stopClientCommand = vscode.commands.registerCommand('mcpManager.stopClient', (clientId: string) => {\r\n        mcpManager.stopClient(clientId);\r\n    });\r\n\r\n    // Add commands to the extension context\r\n    context.subscriptions.push(\r\n        showPanelCommand,\r\n        addServerCommand,\r\n        addClientCommand,\r\n        startServerCommand,\r\n        stopServerCommand,\r\n        startClientCommand,\r\n        stopClientCommand\r\n    );\r\n\r\n    // Create the TreeView for Servers and Clients\r\n    const serversProvider = mcpManager.getServersProvider();\r\n    const clientsProvider = mcpManager.getClientsProvider();\r\n\r\n    const serversTreeView = vscode.window.createTreeView('mcpServersView', {\r\n        treeDataProvider: serversProvider,\r\n        showCollapseAll: true\r\n    });\r\n\r\n    const clientsTreeView = vscode.window.createTreeView('mcpClientsView', {\r\n        treeDataProvider: clientsProvider,\r\n        showCollapseAll: true\r\n    });\r\n\r\n    context.subscriptions.push(serversTreeView, clientsTreeView);\r\n\r\n    // Automatically show the panel when the extension is activated\r\n    MCPWebViewPanel.createOrShow(context.extensionUri, mcpManager);\r\n}\r\n\r\nexport function deactivate() {\r\n    // Clean up resources when extension is deactivated\r\n}","module.exports = require(\"vscode\");","import * as vscode from 'vscode';\r\nimport { MCPManager } from '../mcpManager';\r\n\r\nexport class MCPWebViewPanel {\r\n    public static currentPanel: MCPWebViewPanel | undefined;\r\n    private static readonly viewType = 'mcpManager';\r\n    \r\n    private readonly _panel: vscode.WebviewPanel;\r\n    private readonly _extensionUri: vscode.Uri;\r\n    private readonly _mcpManager: MCPManager;\r\n    private _disposables: vscode.Disposable[] = [];\r\n\r\n    public static createOrShow(extensionUri: vscode.Uri, mcpManager: MCPManager) {\r\n        const column = vscode.window.activeTextEditor\r\n            ? vscode.window.activeTextEditor.viewColumn\r\n            : undefined;\r\n\r\n        // If we already have a panel, show it\r\n        if (MCPWebViewPanel.currentPanel) {\r\n            MCPWebViewPanel.currentPanel._panel.reveal(column);\r\n            return;\r\n        }\r\n\r\n        // Otherwise, create a new panel\r\n        const panel = vscode.window.createWebviewPanel(\r\n            MCPWebViewPanel.viewType,\r\n            'MCP Manager',\r\n            column || vscode.ViewColumn.One,\r\n            {\r\n                // Enable JavaScript in the webview\r\n                enableScripts: true,\r\n                // Restrict the webview to only load resources from our extension\r\n                localResourceRoots: [vscode.Uri.joinPath(extensionUri, 'resources')]\r\n            }\r\n        );\r\n\r\n        MCPWebViewPanel.currentPanel = new MCPWebViewPanel(panel, extensionUri, mcpManager);\r\n    }\r\n\r\n    public static refresh() {\r\n        if (MCPWebViewPanel.currentPanel) {\r\n            MCPWebViewPanel.currentPanel._update();\r\n        }\r\n    }\r\n\r\n    private constructor(panel: vscode.WebviewPanel, extensionUri: vscode.Uri, mcpManager: MCPManager) {\r\n        this._panel = panel;\r\n        this._extensionUri = extensionUri;\r\n        this._mcpManager = mcpManager;\r\n\r\n        // Set the webview's initial html content\r\n        this._update();\r\n\r\n        // Listen for when the panel is disposed\r\n        // This happens when the user closes the panel or when the panel is closed programmatically\r\n        this._panel.onDidDispose(() => this.dispose(), null, this._disposables);\r\n\r\n        // Update the content based on view changes\r\n        this._panel.onDidChangeViewState(\r\n            e => {\r\n                if (this._panel.visible) {\r\n                    this._update();\r\n                }\r\n            },\r\n            null,\r\n            this._disposables\r\n        );\r\n\r\n        // Handle messages from the webview\r\n        this._panel.webview.onDidReceiveMessage(\r\n            async message => {\r\n                switch (message.command) {\r\n                    case 'addServer':\r\n                        await this._mcpManager.addServer();\r\n                        break;\r\n                    case 'addClient':\r\n                        await this._mcpManager.addClient();\r\n                        break;\r\n                    case 'startServer':\r\n                        this._mcpManager.startServer(message.serverId);\r\n                        break;\r\n                    case 'stopServer':\r\n                        this._mcpManager.stopServer(message.serverId);\r\n                        break;\r\n                    case 'startClient':\r\n                        this._mcpManager.startClient(message.clientId);\r\n                        break;\r\n                    case 'stopClient':\r\n                        this._mcpManager.stopClient(message.clientId);\r\n                        break;\r\n                    case 'editServer':\r\n                        this._mcpManager.editServer(message.data);\r\n                        break;\r\n                    case 'editClient':\r\n                        this._mcpManager.editClient(message.data);\r\n                        break;\r\n                    case 'deleteServer':\r\n                        this._mcpManager.deleteServer(message.serverId);\r\n                        break;\r\n                    case 'deleteClient':\r\n                        this._mcpManager.deleteClient(message.clientId);\r\n                        break;\r\n                    case 'getServerDetails':\r\n                        const server = this._mcpManager.getServerDetails(message.serverId);\r\n                        this._panel.webview.postMessage({ command: 'editServer', server });\r\n                        break;\r\n                    case 'getClientDetails':\r\n                        const client = this._mcpManager.getClientDetails(message.clientId);\r\n                        this._panel.webview.postMessage({ command: 'editClient', client });\r\n                        break;\r\n                }\r\n            },\r\n            null,\r\n            this._disposables\r\n        );\r\n    }\r\n\r\n    public dispose() {\r\n        MCPWebViewPanel.currentPanel = undefined;\r\n\r\n        // Clean up our resources\r\n        this._panel.dispose();\r\n\r\n        while (this._disposables.length) {\r\n            const x = this._disposables.pop();\r\n            if (x) {\r\n                x.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _update() {\r\n        const webview = this._panel.webview;\r\n        this._panel.title = 'MCP Manager';\r\n        this._panel.webview.html = this._getHtmlForWebview(webview);\r\n    }\r\n\r\n    private _getHtmlForWebview(webview: vscode.Webview) {\r\n        const servers = this._mcpManager.getServers();\r\n        const clients = this._mcpManager.getClients();\r\n\r\n        // Create HTML representation of servers\r\n        const serversHtml = servers.map(server => {\r\n            return `\r\n                <div class=\"mcp-item ${server.isActive ? 'active' : ''}\">\r\n                    <div class=\"mcp-item-header\">\r\n                        <span class=\"mcp-item-name\">${server.name}</span>\r\n                        <span class=\"mcp-item-type\">${server.type}</span>\r\n                        <span class=\"mcp-item-status\">${server.isActive ? 'Running' : 'Stopped'}</span>\r\n                    </div>\r\n                    <div class=\"mcp-item-details\">\r\n                        <div class=\"mcp-item-command\">${server.command}</div>\r\n                        <div class=\"mcp-item-actions\">\r\n                            <button class=\"mcp-action-button ${server.isActive ? 'stop' : 'start'}\" \r\n                                    onclick=\"handleServerAction('${server.id}', ${server.isActive})\">\r\n                                ${server.isActive ? 'Stop' : 'Start'}\r\n                            </button>\r\n                            <button class=\"mcp-action-button edit\" onclick=\"editServer('${server.id}')\">\r\n                                Edit\r\n                            </button>\r\n                            <button class=\"mcp-action-button delete\" onclick=\"deleteServer('${server.id}')\">\r\n                                Delete\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n        }).join('');\r\n\r\n        // Create HTML representation of clients\r\n        const clientsHtml = clients.map(client => {\r\n            return `\r\n                <div class=\"mcp-item ${client.isActive ? 'active' : ''}\">\r\n                    <div class=\"mcp-item-header\">\r\n                        <span class=\"mcp-item-name\">${client.name}</span>\r\n                        <span class=\"mcp-item-type\">${client.type}</span>\r\n                        <span class=\"mcp-item-status\">${client.isActive ? 'Running' : 'Stopped'}</span>\r\n                    </div>\r\n                    <div class=\"mcp-item-details\">\r\n                        <div class=\"mcp-item-command\">${client.command}</div>\r\n                        <div class=\"mcp-item-actions\">\r\n                            <button class=\"mcp-action-button ${client.isActive ? 'stop' : 'start'}\" \r\n                                    onclick=\"handleClientAction('${client.id}', ${client.isActive})\">\r\n                                ${client.isActive ? 'Stop' : 'Start'}\r\n                            </button>\r\n                            <button class=\"mcp-action-button edit\" onclick=\"editClient('${client.id}')\">\r\n                                Edit\r\n                            </button>\r\n                            <button class=\"mcp-action-button delete\" onclick=\"deleteClient('${client.id}')\">\r\n                                Delete\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n        }).join('');\r\n\r\n        return `<!DOCTYPE html>\r\n            <html lang=\"en\">\r\n            <head>\r\n                <meta charset=\"UTF-8\">\r\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n                <title>MCP Manager</title>\r\n                <style>\r\n                    :root {\r\n                        --container-padding: 20px;\r\n                        --input-padding-vertical: 6px;\r\n                        --input-padding-horizontal: 12px;\r\n                        --input-margin-vertical: 4px;\r\n                        --input-margin-horizontal: 0;\r\n                    }\r\n\r\n                    body {\r\n                        padding: 0;\r\n                        margin: 0;\r\n                        color: var(--vscode-foreground);\r\n                        font-size: var(--vscode-font-size);\r\n                        font-weight: var(--vscode-font-weight);\r\n                        font-family: var(--vscode-font-family);\r\n                        background-color: var(--vscode-editor-background);\r\n                    }\r\n\r\n                    .container {\r\n                        display: flex;\r\n                        flex-direction: column;\r\n                        height: 100vh;\r\n                        max-width: 1200px;\r\n                        margin: 0 auto;\r\n                        padding: var(--container-padding);\r\n                    }\r\n\r\n                    .header {\r\n                        display: flex;\r\n                        justify-content: space-between;\r\n                        align-items: center;\r\n                        margin-bottom: 20px;\r\n                    }\r\n\r\n                    .header h1 {\r\n                        margin: 0;\r\n                        padding: 0;\r\n                    }\r\n\r\n                    .panels-container {\r\n                        display: flex;\r\n                        flex-direction: column;\r\n                        flex-grow: 1;\r\n                        overflow: hidden;\r\n                        border: 1px solid var(--vscode-widget-border);\r\n                        border-radius: 4px;\r\n                    }\r\n\r\n                    .panel {\r\n                        flex: 1;\r\n                        padding: 10px;\r\n                        overflow-y: auto;\r\n                    }\r\n\r\n                    .panel-header {\r\n                        display: flex;\r\n                        justify-content: space-between;\r\n                        align-items: center;\r\n                        margin-bottom: 10px;\r\n                        padding-bottom: 5px;\r\n                        border-bottom: 1px solid var(--vscode-widget-border);\r\n                    }\r\n\r\n                    .divider {\r\n                        height: 1px;\r\n                        background-color: var(--vscode-widget-border);\r\n                    }\r\n\r\n                    .mcp-item {\r\n                        margin-bottom: 10px;\r\n                        padding: 10px;\r\n                        border-radius: 4px;\r\n                        background-color: var(--vscode-editor-inactiveSelectionBackground);\r\n                    }\r\n\r\n                    .mcp-item.active {\r\n                        background-color: var(--vscode-editor-selectionBackground);\r\n                    }\r\n\r\n                    .mcp-item-header {\r\n                        display: flex;\r\n                        justify-content: space-between;\r\n                        align-items: center;\r\n                        margin-bottom: 5px;\r\n                    }\r\n\r\n                    .mcp-item-details {\r\n                        display: flex;\r\n                        justify-content: space-between;\r\n                        align-items: center;\r\n                    }\r\n\r\n                    .mcp-item-command {\r\n                        font-family: var(--vscode-editor-font-family);\r\n                        font-size: var(--vscode-editor-font-size);\r\n                        color: var(--vscode-textPreformat-foreground);\r\n                        background-color: var(--vscode-textBlockQuote-background);\r\n                        padding: 2px 6px;\r\n                        border-radius: 2px;\r\n                        overflow: hidden;\r\n                        text-overflow: ellipsis;\r\n                        max-width: 70%;\r\n                    }\r\n\r\n                    .mcp-action-button {\r\n                        padding: var(--input-padding-vertical) var(--input-padding-horizontal);\r\n                        border: none;\r\n                        border-radius: 2px;\r\n                        font-size: var(--vscode-font-size);\r\n                        cursor: pointer;\r\n                    }\r\n\r\n                    .mcp-action-button.start {\r\n                        background-color: var(--vscode-button-background);\r\n                        color: var(--vscode-button-foreground);\r\n                    }\r\n\r\n                    .mcp-action-button.stop {\r\n                        background-color: var(--vscode-editorError-foreground);\r\n                        color: var(--vscode-button-foreground);\r\n                    }\r\n\r\n                    .add-button {\r\n                        padding: var(--input-padding-vertical) var(--input-padding-horizontal);\r\n                        border: none;\r\n                        border-radius: 2px;\r\n                        font-size: var(--vscode-font-size);\r\n                        background-color: var(--vscode-button-background);\r\n                        color: var(--vscode-button-foreground);\r\n                        cursor: pointer;\r\n                    }\r\n\r\n                    .empty-message {\r\n                        padding: 20px;\r\n                        text-align: center;\r\n                        color: var(--vscode-descriptionForeground);\r\n                    }\r\n\r\n                    @media (min-width: 768px) {\r\n                        .panels-container {\r\n                            flex-direction: row;\r\n                        }\r\n\r\n                        .divider {\r\n                            width: 1px;\r\n                            height: auto;\r\n                        }\r\n                    }\r\n\r\n                    .modal {\r\n                        display: none;\r\n                        position: fixed;\r\n                        z-index: 1;\r\n                        left: 0;\r\n                        top: 0;\r\n                        width: 100%;\r\n                        height: 100%;\r\n                        background-color: rgba(0,0,0,0.4);\r\n                    }\r\n\r\n                    .modal-content {\r\n                        background-color: var(--vscode-editor-background);\r\n                        margin: 15% auto;\r\n                        padding: 20px;\r\n                        border: 1px solid var(--vscode-widget-border);\r\n                        width: 80%;\r\n                        max-width: 500px;\r\n                        border-radius: 4px;\r\n                    }\r\n\r\n                    .form-group {\r\n                        margin-bottom: 15px;\r\n                    }\r\n\r\n                    .form-group label {\r\n                        display: block;\r\n                        margin-bottom: 5px;\r\n                    }\r\n\r\n                    .form-group input, .form-group select {\r\n                        width: 100%;\r\n                        padding: 8px;\r\n                        background: var(--vscode-input-background);\r\n                        color: var(--vscode-input-foreground);\r\n                        border: 1px solid var(--vscode-input-border);\r\n                        border-radius: 2px;\r\n                    }\r\n\r\n                    .modal-buttons {\r\n                        display: flex;\r\n                        justify-content: flex-end;\r\n                        gap: 10px;\r\n                        margin-top: 20px;\r\n                    }\r\n\r\n                    .mcp-item-actions {\r\n                        display: flex;\r\n                        gap: 5px;\r\n                    }\r\n\r\n                    .mcp-action-button.edit {\r\n                        background-color: var(--vscode-button-secondaryBackground);\r\n                        color: var(--vscode-button-secondaryForeground);\r\n                    }\r\n\r\n                    .mcp-action-button.delete {\r\n                        background-color: var(--vscode-errorForeground);\r\n                        color: var(--vscode-button-foreground);\r\n                    }\r\n\r\n                    .close {\r\n                        float: right;\r\n                        cursor: pointer;\r\n                        font-size: 20px;\r\n                    }\r\n\r\n                </style>\r\n            </head>\r\n            <body>\r\n                <div class=\"container\">\r\n                    <div class=\"header\">\r\n                        <h1>MCP Manager</h1>\r\n                    </div>\r\n                    <div class=\"panels-container\">\r\n                        <div class=\"panel\">\r\n                            <div class=\"panel-header\">\r\n                                <h2>Servers</h2>\r\n                                <button class=\"add-button\" onclick=\"addServer()\">Add Server</button>\r\n                            </div>\r\n                            <div class=\"panel-content\">\r\n                                ${serversHtml || '<div class=\"empty-message\">No servers added yet.</div>'}\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"divider\"></div>\r\n                        <div class=\"panel\">\r\n                            <div class=\"panel-header\">\r\n                                <h2>Clients</h2>\r\n                                <button class=\"add-button\" onclick=\"addClient()\">Add Client</button>\r\n                            </div>\r\n                            <div class=\"panel-content\">\r\n                                ${clientsHtml || '<div class=\"empty-message\">No clients added yet.</div>'}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Add Server Modal -->\r\n                <div id=\"addServerModal\" class=\"modal\">\r\n                    <div class=\"modal-content\">\r\n                        <span class=\"close\" onclick=\"closeModal('addServerModal')\">&times;</span>\r\n                        <h2>Add Server</h2>\r\n                        <form id=\"addServerForm\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"serverName\">Name:</label>\r\n                                <input type=\"text\" id=\"serverName\" required>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label for=\"serverType\">Type:</label>\r\n                                <select id=\"serverType\" required>\r\n                                    <option value=\"process\">Process</option>\r\n                                    <option value=\"sse\">SSE</option>\r\n                                </select>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label for=\"serverCommand\">Command/URL:</label>\r\n                                <input type=\"text\" id=\"serverCommand\" required>\r\n                            </div>\r\n                            <div class=\"modal-buttons\">\r\n                                <button type=\"button\" onclick=\"closeModal('addServerModal')\" class=\"mcp-action-button\">Cancel</button>\r\n                                <button type=\"submit\" class=\"mcp-action-button start\">Add Server</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Add Client Modal -->\r\n                <div id=\"addClientModal\" class=\"modal\">\r\n                    <div class=\"modal-content\">\r\n                        <span class=\"close\" onclick=\"closeModal('addClientModal')\">&times;</span>\r\n                        <h2>Add Client</h2>\r\n                        <form id=\"addClientForm\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"clientName\">Name:</label>\r\n                                <input type=\"text\" id=\"clientName\" required>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label for=\"clientType\">Type:</label>\r\n                                <select id=\"clientType\" required>\r\n                                    <option value=\"process\">Process</option>\r\n                                    <option value=\"sse\">SSE</option>\r\n                                </select>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label for=\"clientCommand\">Command/URL:</label>\r\n                                <input type=\"text\" id=\"clientCommand\" required>\r\n                            </div>\r\n                            <div class=\"modal-buttons\">\r\n                                <button type=\"button\" onclick=\"closeModal('addClientModal')\" class=\"mcp-action-button\">Cancel</button>\r\n                                <button type=\"submit\" class=\"mcp-action-button start\">Add Client</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Edit Server Modal -->\r\n                <div id=\"editServerModal\" class=\"modal\">\r\n                    <div class=\"modal-content\">\r\n                        <span class=\"close\" onclick=\"closeModal('editServerModal')\">&times;</span>\r\n                        <h2>Edit Server</h2>\r\n                        <form id=\"editServerForm\">\r\n                            <input type=\"hidden\" id=\"editServerId\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"editServerName\">Name:</label>\r\n                                <input type=\"text\" id=\"editServerName\" required>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label for=\"editServerType\">Type:</label>\r\n                                <select id=\"editServerType\" required>\r\n                                    <option value=\"process\">Process</option>\r\n                                    <option value=\"sse\">SSE</option>\r\n                                </select>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label for=\"editServerCommand\">Command/URL:</label>\r\n                                <input type=\"text\" id=\"editServerCommand\" required>\r\n                            </div>\r\n                            <div class=\"modal-buttons\">\r\n                                <button type=\"button\" onclick=\"closeModal('editServerModal')\" class=\"mcp-action-button\">Cancel</button>\r\n                                <button type=\"submit\" class=\"mcp-action-button start\">Save Changes</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Edit Client Modal -->\r\n                <div id=\"editClientModal\" class=\"modal\">\r\n                    <div class=\"modal-content\">\r\n                        <span class=\"close\" onclick=\"closeModal('editClientModal')\">&times;</span>\r\n                        <h2>Edit Client</h2>\r\n                        <form id=\"editClientForm\">\r\n                            <input type=\"hidden\" id=\"editClientId\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"editClientName\">Name:</label>\r\n                                <input type=\"text\" id=\"editClientName\" required>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label for=\"editClientType\">Type:</label>\r\n                                <select id=\"editClientType\" required>\r\n                                    <option value=\"process\">Process</option>\r\n                                    <option value=\"sse\">SSE</option>\r\n                                </select>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label for=\"editClientCommand\">Command/URL:</label>\r\n                                <input type=\"text\" id=\"editClientCommand\" required>\r\n                            </div>\r\n                            <div class=\"modal-buttons\">\r\n                                <button type=\"button\" onclick=\"closeModal('editClientModal')\" class=\"mcp-action-button\">Cancel</button>\r\n                                <button type=\"submit\" class=\"mcp-action-button start\">Save Changes</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n\r\n                <script>\r\n                    const vscode = acquireVsCodeApi();\r\n\r\n                    function showModal(modalId) {\r\n                        document.getElementById(modalId).style.display = \"block\";\r\n                    }\r\n\r\n                    function closeModal(modalId) {\r\n                        document.getElementById(modalId).style.display = \"none\";\r\n                    }\r\n\r\n                    function addServer() {\r\n                        showModal('addServerModal');\r\n                    }\r\n\r\n                    function addClient() {\r\n                        showModal('addClientModal');\r\n                    }\r\n\r\n                    document.getElementById('addServerForm').addEventListener('submit', function(e) {\r\n                        e.preventDefault();\r\n                        const data = {\r\n                            name: document.getElementById('serverName').value,\r\n                            type: document.getElementById('serverType').value,\r\n                            command: document.getElementById('serverCommand').value\r\n                        };\r\n                        vscode.postMessage({\r\n                            command: 'addServer',\r\n                            data: data\r\n                        });\r\n                        closeModal('addServerModal');\r\n                        this.reset();\r\n                    });\r\n\r\n                    document.getElementById('addClientForm').addEventListener('submit', function(e) {\r\n                        e.preventDefault();\r\n                        const data = {\r\n                            name: document.getElementById('clientName').value,\r\n                            type: document.getElementById('clientType').value,\r\n                            command: document.getElementById('clientCommand').value\r\n                        };\r\n                        vscode.postMessage({\r\n                            command: 'addClient',\r\n                            data: data\r\n                        });\r\n                        closeModal('addClientModal');\r\n                        this.reset();\r\n                    });\r\n\r\n                    document.getElementById('editServerForm').addEventListener('submit', function(e) {\r\n                        e.preventDefault();\r\n                        const data = {\r\n                            id: document.getElementById('editServerId').value,\r\n                            name: document.getElementById('editServerName').value,\r\n                            type: document.getElementById('editServerType').value,\r\n                            command: document.getElementById('editServerCommand').value\r\n                        };\r\n                        vscode.postMessage({\r\n                            command: 'editServer',\r\n                            data: data\r\n                        });\r\n                        closeModal('editServerModal');\r\n                    });\r\n\r\n                    document.getElementById('editClientForm').addEventListener('submit', function(e) {\r\n                        e.preventDefault();\r\n                        const data = {\r\n                            id: document.getElementById('editClientId').value,\r\n                            name: document.getElementById('editClientName').value,\r\n                            type: document.getElementById('editClientType').value,\r\n                            command: document.getElementById('editClientCommand').value\r\n                        };\r\n                        vscode.postMessage({\r\n                            command: 'editClient',\r\n                            data: data\r\n                        });\r\n                        closeModal('editClientModal');\r\n                    });\r\n\r\n                    function handleServerAction(serverId, isActive) {\r\n                        vscode.postMessage({\r\n                            command: isActive ? 'stopServer' : 'startServer',\r\n                            serverId: serverId\r\n                        });\r\n                    }\r\n\r\n                    function handleClientAction(clientId, isActive) {\r\n                        vscode.postMessage({\r\n                            command: isActive ? 'stopClient' : 'startClient',\r\n                            clientId: clientId\r\n                        });\r\n                    }\r\n\r\n                    function editServer(serverId) {\r\n                        vscode.postMessage({\r\n                            command: 'getServerDetails',\r\n                            serverId: serverId\r\n                        });\r\n                    }\r\n\r\n                    function editClient(clientId) {\r\n                        vscode.postMessage({\r\n                            command: 'getClientDetails',\r\n                            clientId: clientId\r\n                        });\r\n                    }\r\n\r\n                    function deleteServer(serverId) {\r\n                        if (confirm('Are you sure you want to delete this server?')) {\r\n                            vscode.postMessage({\r\n                                command: 'deleteServer',\r\n                                serverId: serverId\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    function deleteClient(clientId) {\r\n                        if (confirm('Are you sure you want to delete this client?')) {\r\n                            vscode.postMessage({\r\n                                command: 'deleteClient',\r\n                                clientId: clientId\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    window.addEventListener('message', event => {\r\n                        const message = event.data;\r\n                        switch (message.command) {\r\n                            case 'editServer':\r\n                                document.getElementById('editServerId').value = message.server.id;\r\n                                document.getElementById('editServerName').value = message.server.name;\r\n                                document.getElementById('editServerType').value = message.server.type;\r\n                                document.getElementById('editServerCommand').value = message.server.command;\r\n                                showModal('editServerModal');\r\n                                break;\r\n                            case 'editClient':\r\n                                document.getElementById('editClientId').value = message.client.id;\r\n                                document.getElementById('editClientName').value = message.client.name;\r\n                                document.getElementById('editClientType').value = message.client.type;\r\n                                document.getElementById('editClientCommand').value = message.client.command;\r\n                                showModal('editClientModal');\r\n                                break;\r\n                        }\r\n                    });\r\n                </script>\r\n            </body>\r\n            </html>`;\r\n    }\r\n}","import * as vscode from 'vscode';\r\nimport { MCPManager } from '../mcpManager';\r\nimport { MCPServer } from '../models/mcpServer';\r\n\r\nexport class ServerTreeDataProvider implements vscode.TreeDataProvider<ServerTreeItem> {\r\n    private _onDidChangeTreeData: vscode.EventEmitter<ServerTreeItem | undefined | null | void> = new vscode.EventEmitter<ServerTreeItem | undefined | null | void>();\r\n    readonly onDidChangeTreeData: vscode.Event<ServerTreeItem | undefined | null | void> = this._onDidChangeTreeData.event;\r\n    \r\n    constructor(private mcpManager: MCPManager) {}\r\n\r\n    refresh(): void {\r\n        this._onDidChangeTreeData.fire();\r\n    }\r\n\r\n    getTreeItem(element: ServerTreeItem): vscode.TreeItem {\r\n        return element;\r\n    }\r\n\r\n    getChildren(element?: ServerTreeItem): Thenable<ServerTreeItem[]> {\r\n        if (!element) {\r\n            // Root level - return all servers\r\n            const servers = this.mcpManager.getServers();\r\n            return Promise.resolve(\r\n                servers.map(server => new ServerTreeItem(\r\n                    server,\r\n                    server.name,\r\n                    vscode.TreeItemCollapsibleState.None,\r\n                    {\r\n                        title: server.isActive ? 'Stop Server' : 'Start Server',\r\n                        command: server.isActive ? 'mcpManager.stopServer' : 'mcpManager.startServer',\r\n                        arguments: [server.id]\r\n                    }\r\n                ))\r\n            );\r\n        }\r\n        \r\n        return Promise.resolve([]);\r\n    }\r\n}\r\n\r\nexport class ServerTreeItem extends vscode.TreeItem {\r\n    constructor(\r\n        public readonly server: MCPServer,\r\n        public readonly label: string,\r\n        public readonly collapsibleState: vscode.TreeItemCollapsibleState,\r\n        public readonly command?: vscode.Command\r\n    ) {\r\n        super(label, collapsibleState);\r\n        \r\n        this.tooltip = `Type: ${server.type} | Command: ${server.command}`;\r\n        this.description = server.isActive ? 'Running' : 'Stopped';\r\n        this.iconPath = server.isActive ? \r\n            new vscode.ThemeIcon('play') :\r\n            new vscode.ThemeIcon('stop');\r\n        this.contextValue = 'mcpServer';\r\n    }\r\n}","module.exports = require(\"os\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["constructor","mcpManager","_onDidChangeTreeData","vscode","EventEmitter","onDidChangeTreeData","this","event","refresh","fire","getTreeItem","element","getChildren","clients","getClients","Promise","resolve","map","client","ClientTreeItem","name","TreeItemCollapsibleState","None","title","isActive","command","arguments","id","TreeItem","label","collapsibleState","super","tooltip","type","description","iconPath","ThemeIcon","contextValue","context","servers","activeTerminals","Map","serversProvider","ServerTreeDataProvider","clientsProvider","ClientTreeDataProvider","settingsPath","path","join","os","homedir","process","platform","loadServersAndClients","fs","existsSync","fileContent","readFileSync","settings","JSON","parse","savedServers","s","savedClients","c","error","storedServers","globalState","get","storedClients","refreshTreeViews","saveServersAndClients","update","updateVSCodeSettings","config","workspace","getConfiguration","ConfigurationTarget","Workspace","window","showErrorMessage","Error","message","String","addServer","data","newServer","Date","now","toString","push","MCPWebViewPanel","serverName","showInputBox","prompt","placeHolder","selectedType","showQuickPick","serverType","addClient","newClient","clientName","clientType","editServer","serverIndex","findIndex","editClient","clientIndex","deleteServer","serverId","stopServer","splice","deleteClient","clientId","stopClient","getServerDetails","find","getClientDetails","startProcess","terminal","createTerminal","sendText","show","startServer","server","set","wsScript","split","replace","dispose","delete","startClient","scriptPath","extensionPath","npmInstall","processId","then","pid","interval","setInterval","clearInterval","getServers","getServersProvider","getClientsProvider","console","log","MCPManager","showPanelCommand","commands","registerCommand","createOrShow","extensionUri","addServerCommand","addClientCommand","startServerCommand","stopServerCommand","startClientCommand","stopClientCommand","subscriptions","serversTreeView","createTreeView","treeDataProvider","showCollapseAll","clientsTreeView","module","exports","require","column","activeTextEditor","viewColumn","undefined","currentPanel","_panel","reveal","panel","createWebviewPanel","viewType","ViewColumn","One","enableScripts","localResourceRoots","Uri","joinPath","_update","_disposables","_extensionUri","_mcpManager","onDidDispose","onDidChangeViewState","e","visible","webview","onDidReceiveMessage","async","postMessage","length","x","pop","html","_getHtmlForWebview","ServerTreeItem","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}