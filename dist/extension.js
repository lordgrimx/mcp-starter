(()=>{"use strict";var e={203:function(e,n,t){var i,r=this&&this.__createBinding||(Object.create?function(e,n,t,i){void 0===i&&(i=t);var r=Object.getOwnPropertyDescriptor(n,t);r&&!("get"in r?!n.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,i,r)}:function(e,n,t,i){void 0===i&&(i=t),e[i]=n[t]}),s=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||(i=function(e){return i=Object.getOwnPropertyNames||function(e){var n=[];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[n.length]=t);return n},i(e)},function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t=i(e),o=0;o<t.length;o++)"default"!==t[o]&&r(n,e,t[o]);return s(n,e),n});Object.defineProperty(n,"__esModule",{value:!0}),n.ClientTreeItem=n.ClientTreeDataProvider=void 0;const a=o(t(398));n.ClientTreeDataProvider=class{constructor(e){this.mcpManager=e,this._onDidChangeTreeData=new a.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){if(!e){const e=this.mcpManager.getClients();return Promise.resolve(e.map((e=>new d(e,e.name,a.TreeItemCollapsibleState.None,{title:e.isActive?"Stop Client":"Start Client",command:e.isActive?"mcpManager.stopClient":"mcpManager.startClient",arguments:[e.id]}))))}return Promise.resolve([])}};class d extends a.TreeItem{constructor(e,n,t,i){super(n,t),this.client=e,this.label=n,this.collapsibleState=t,this.command=i,this.tooltip=`Type: ${e.type} | Command: ${e.command}`,this.description=e.isActive?"Running":"Stopped",this.iconPath=e.isActive?new a.ThemeIcon("play"):new a.ThemeIcon("stop"),this.contextValue="mcpClient"}}n.ClientTreeItem=d},213:function(e,n,t){var i,r=this&&this.__createBinding||(Object.create?function(e,n,t,i){void 0===i&&(i=t);var r=Object.getOwnPropertyDescriptor(n,t);r&&!("get"in r?!n.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,i,r)}:function(e,n,t,i){void 0===i&&(i=t),e[i]=n[t]}),s=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||(i=function(e){return i=Object.getOwnPropertyNames||function(e){var n=[];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[n.length]=t);return n},i(e)},function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t=i(e),o=0;o<t.length;o++)"default"!==t[o]&&r(n,e,t[o]);return s(n,e),n});Object.defineProperty(n,"__esModule",{value:!0}),n.MCPManager=void 0;const a=o(t(398)),d=o(t(896)),c=o(t(928)),l=o(t(857)),m=t(855),v=t(203),p=t(622);n.MCPManager=class{constructor(e){this.servers=[],this.clients=[],this.activeTerminals=new Map,this.context=e,this.serversProvider=new m.ServerTreeDataProvider(this),this.clientsProvider=new v.ClientTreeDataProvider(this),this.settingsPath=c.join(l.homedir(),"darwin"===process.platform?"Library/Application Support/Code/User/settings.json":"linux"===process.platform?".config/Code/User/settings.json":"AppData/Roaming/Code/User/settings.json"),this.loadServersAndClients()}loadServersAndClients(){try{if(d.existsSync(this.settingsPath)){const e=d.readFileSync(this.settingsPath,"utf8"),n=JSON.parse(e),t=n["mcpmanager.servers"]||[];this.servers=t.map((e=>({id:e.id,name:e.name,type:e.type,command:e.command,isActive:!1})));const i=n["mcpmanager.clients"]||[];this.clients=i.map((e=>({id:e.id,name:e.name,type:e.type,command:e.command,isActive:!1})))}}catch(e){const n=this.context.globalState.get("mcpServers",[]),t=this.context.globalState.get("mcpClients",[]);this.servers=n,this.clients=t}this.refreshTreeViews()}saveServersAndClients(){this.context.globalState.update("mcpServers",this.servers),this.context.globalState.update("mcpClients",this.clients),this.refreshTreeViews()}refreshTreeViews(){this.serversProvider.refresh(),this.clientsProvider.refresh(),this.updateVSCodeSettings()}updateVSCodeSettings(){try{const e=a.workspace.getConfiguration("mcpmanager");e.update("servers",this.servers,a.ConfigurationTarget.Workspace),e.update("clients",this.clients,a.ConfigurationTarget.Workspace)}catch(e){a.window.showErrorMessage(`Failed to update VS Code settings: ${e instanceof Error?e.message:String(e)}`)}}async addServer(e){if(e){const n={id:Date.now().toString(),name:e.name,type:e.type,command:e.command,isActive:!1};return this.servers.push(n),this.saveServersAndClients(),void p.MCPWebViewPanel.refresh()}const n=await a.window.showInputBox({prompt:"Enter a name for the server",placeHolder:"Server Name"});if(!n)return;const t=await a.window.showQuickPick([{label:"process",description:"Run a command in a terminal"},{label:"sse",description:"Connect to Server-Sent Events endpoint"}],{placeHolder:"Select server type"});if(!t)return;const i=t.label;let r="";"process"===i?r=await a.window.showInputBox({prompt:"Enter the command to run",placeHolder:"Command"})||"":"sse"===i&&(r=await a.window.showInputBox({prompt:"Enter the SSE endpoint URL",placeHolder:"URL"})||"");const s={id:Date.now().toString(),name:n,type:i,command:r,isActive:!1};this.servers.push(s),this.saveServersAndClients(),p.MCPWebViewPanel.refresh()}async addClient(e){if(e){const n={id:Date.now().toString(),name:e.name,type:e.type,command:e.command,isActive:!1};return this.clients.push(n),this.saveServersAndClients(),void p.MCPWebViewPanel.refresh()}const n=await a.window.showInputBox({prompt:"Enter a name for the client",placeHolder:"Client Name"});if(!n)return;const t=await a.window.showQuickPick([{label:"process",description:"Run a command in a terminal"},{label:"sse",description:"Connect to Server-Sent Events endpoint"}],{placeHolder:"Select client type"});if(!t)return;const i=t.label;let r="";"process"===i?r=await a.window.showInputBox({prompt:"Enter the command to run",placeHolder:"Command"})||"":"sse"===i&&(r=await a.window.showInputBox({prompt:"Enter the SSE endpoint URL",placeHolder:"URL"})||"");const s={id:Date.now().toString(),name:n,type:i,command:r,isActive:!1};this.clients.push(s),this.saveServersAndClients(),p.MCPWebViewPanel.refresh()}editServer(e){const n=this.servers.findIndex((n=>n.id===e.id));if(-1===n)return void a.window.showErrorMessage(`Server with ID ${e.id} not found.`);const t=this.servers[n].isActive;this.servers[n]={...e,isActive:t},this.saveServersAndClients(),p.MCPWebViewPanel.refresh()}editClient(e){const n=this.clients.findIndex((n=>n.id===e.id));if(-1===n)return void a.window.showErrorMessage(`Client with ID ${e.id} not found.`);const t=this.clients[n].isActive;this.clients[n]={...e,isActive:t},this.saveServersAndClients(),p.MCPWebViewPanel.refresh()}deleteServer(e){const n=this.servers.findIndex((n=>n.id===e));-1!==n?(this.servers[n].isActive&&this.stopServer(e),this.servers.splice(n,1),this.saveServersAndClients(),p.MCPWebViewPanel.refresh()):a.window.showErrorMessage(`Server with ID ${e} not found.`)}deleteClient(e){const n=this.clients.findIndex((n=>n.id===e));-1!==n?(this.clients[n].isActive&&this.stopClient(e),this.clients.splice(n,1),this.saveServersAndClients(),p.MCPWebViewPanel.refresh()):a.window.showErrorMessage(`Client with ID ${e} not found.`)}getServerDetails(e){return this.servers.find((n=>n.id===e))}getClientDetails(e){return this.clients.find((n=>n.id===e))}async startProcess(e,n){try{const t=a.window.createTerminal(`MCP ${e}`);return t.sendText(n),t.show(),t}catch(e){return void a.window.showErrorMessage(`Failed to start process: ${e instanceof Error?e.message:String(e)}`)}}async startServer(e){const n=this.servers.find((n=>n.id===e));if(n)try{if("process"===n.type){const t=await this.startProcess(n.name,n.command);t&&(n.isActive=!0,this.activeTerminals.set(e,t))}else if("sse"===n.type){const t=`\n                    const WebSocket = require('ws');\n                    const port = ${n.command.split(":")[1]||3e3};\n                    \n                    const wss = new WebSocket.Server({ port });\n                    console.log(\`WebSocket Server running on ws://localhost:\${port}\`);\n                    \n                    wss.on('connection', (ws) => {\n                        console.log('New connection established');\n                        \n                        // Send welcome message\n                        ws.send(JSON.stringify({ type: 'connected', message: 'Server ready' }));\n                        \n                        // Setup heartbeat\n                        const heartbeat = setInterval(() => {\n                            if (ws.readyState === WebSocket.OPEN) {\n                                ws.send(JSON.stringify({ type: 'heartbeat', message: 'ping' }));\n                            }\n                        }, 5000);\n                        \n                        ws.on('message', (data) => {\n                            try {\n                                const message = JSON.parse(data.toString());\n                                console.log('Received:', message);\n                            } catch (e) {\n                                console.log('Received raw message:', data.toString());\n                            }\n                        });\n                        \n                        ws.on('close', () => {\n                            console.log('Client disconnected');\n                            clearInterval(heartbeat);\n                        });\n                        \n                        ws.on('error', (error) => {\n                            console.error('WebSocket error:', error);\n                        });\n                    });\n                    \n                    process.on('SIGINT', () => {\n                        wss.close(() => {\n                            console.log('Server closed');\n                            process.exit();\n                        });\n                    });\n                `,i=await this.startProcess(n.name,`node -e "${t.replace(/\n\s+/g," ")}"`);i&&(n.isActive=!0,this.activeTerminals.set(e,i))}this.saveServersAndClients(),p.MCPWebViewPanel.refresh()}catch(e){a.window.showErrorMessage(`Failed to start server: ${e instanceof Error?e.message:String(e)}`)}else a.window.showErrorMessage(`Server with ID ${e} not found.`)}stopServer(e){const n=this.servers.find((n=>n.id===e));if(!n)return void a.window.showErrorMessage(`Server with ID ${e} not found.`);const t=this.activeTerminals.get(e);t&&(t.dispose(),this.activeTerminals.delete(e)),n.isActive=!1,this.saveServersAndClients(),p.MCPWebViewPanel.refresh()}async startClient(e){const n=this.clients.find((n=>n.id===e));if(n)try{if("process"===n.type){const t=await this.startProcess(n.name,n.command);t&&(n.isActive=!0,this.activeTerminals.set(e,t))}else if("sse"===n.type){const t=c.join(this.context.extensionPath,"dist","scripts","wsClient.js");if(!d.existsSync(t))return void a.window.showErrorMessage(`SSE client script not found at ${t}`);if(!d.existsSync(c.join(this.context.extensionPath,"node_modules","eventsource-parser"))){const e=await this.startProcess("npm install","npm install eventsource-parser");e&&await new Promise((n=>{e.processId.then((e=>{if(e){const e=setInterval((()=>{d.existsSync(c.join(this.context.extensionPath,"node_modules","eventsource-parser"))&&(clearInterval(e),n())}),1e3)}}))}))}const i=await this.startProcess(n.name,`node "${t}" "${n.command}"`);i&&(n.isActive=!0,this.activeTerminals.set(e,i))}this.saveServersAndClients(),p.MCPWebViewPanel.refresh()}catch(e){a.window.showErrorMessage(`Failed to start client: ${e instanceof Error?e.message:String(e)}`)}else a.window.showErrorMessage(`Client with ID ${e} not found.`)}stopClient(e){const n=this.clients.find((n=>n.id===e));if(!n)return void a.window.showErrorMessage(`Client with ID ${e} not found.`);const t=this.activeTerminals.get(e);t&&(t.dispose(),this.activeTerminals.delete(e)),n.isActive=!1,this.saveServersAndClients(),p.MCPWebViewPanel.refresh()}getServers(){return this.servers}getClients(){return this.clients}getServersProvider(){return this.serversProvider}getClientsProvider(){return this.clientsProvider}}},265:function(e,n,t){var i,r=this&&this.__createBinding||(Object.create?function(e,n,t,i){void 0===i&&(i=t);var r=Object.getOwnPropertyDescriptor(n,t);r&&!("get"in r?!n.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,i,r)}:function(e,n,t,i){void 0===i&&(i=t),e[i]=n[t]}),s=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||(i=function(e){return i=Object.getOwnPropertyNames||function(e){var n=[];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[n.length]=t);return n},i(e)},function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t=i(e),o=0;o<t.length;o++)"default"!==t[o]&&r(n,e,t[o]);return s(n,e),n});Object.defineProperty(n,"__esModule",{value:!0}),n.activate=function(e){console.log("MCP Manager extension is now active!");const n=new d.MCPManager(e),t=a.commands.registerCommand("mcpManager.showPanel",(()=>{c.MCPWebViewPanel.createOrShow(e.extensionUri,n)})),i=a.commands.registerCommand("mcpManager.addServer",(()=>{n.addServer()})),r=a.commands.registerCommand("mcpManager.addClient",(()=>{n.addClient()})),s=a.commands.registerCommand("mcpManager.startServer",(e=>{n.startServer(e)})),o=a.commands.registerCommand("mcpManager.stopServer",(e=>{n.stopServer(e)})),l=a.commands.registerCommand("mcpManager.startClient",(e=>{n.startClient(e)})),m=a.commands.registerCommand("mcpManager.stopClient",(e=>{n.stopClient(e)}));e.subscriptions.push(t,i,r,s,o,l,m);const v=n.getServersProvider(),p=n.getClientsProvider(),u=a.window.createTreeView("mcpServersView",{treeDataProvider:v,showCollapseAll:!0}),h=a.window.createTreeView("mcpClientsView",{treeDataProvider:p,showCollapseAll:!0});e.subscriptions.push(u,h),c.MCPWebViewPanel.createOrShow(e.extensionUri,n)},n.deactivate=function(){};const a=o(t(398)),d=t(213),c=t(622)},398:e=>{e.exports=require("vscode")},622:function(e,n,t){var i,r=this&&this.__createBinding||(Object.create?function(e,n,t,i){void 0===i&&(i=t);var r=Object.getOwnPropertyDescriptor(n,t);r&&!("get"in r?!n.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,i,r)}:function(e,n,t,i){void 0===i&&(i=t),e[i]=n[t]}),s=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||(i=function(e){return i=Object.getOwnPropertyNames||function(e){var n=[];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[n.length]=t);return n},i(e)},function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t=i(e),o=0;o<t.length;o++)"default"!==t[o]&&r(n,e,t[o]);return s(n,e),n});Object.defineProperty(n,"__esModule",{value:!0}),n.MCPWebViewPanel=void 0;const a=o(t(398));class d{static createOrShow(e,n){const t=a.window.activeTextEditor?a.window.activeTextEditor.viewColumn:void 0;if(d.currentPanel)return void d.currentPanel._panel.reveal(t);const i=a.window.createWebviewPanel(d.viewType,"MCP Manager",t||a.ViewColumn.One,{enableScripts:!0,localResourceRoots:[a.Uri.joinPath(e,"resources")]});d.currentPanel=new d(i,e,n)}static refresh(){d.currentPanel&&d.currentPanel._update()}constructor(e,n,t){this._disposables=[],this._panel=e,this._extensionUri=n,this._mcpManager=t,this._update(),this._panel.onDidDispose((()=>this.dispose()),null,this._disposables),this._panel.onDidChangeViewState((e=>{this._panel.visible&&this._update()}),null,this._disposables),this._panel.webview.onDidReceiveMessage((async e=>{switch(e.command){case"addServer":await this._mcpManager.addServer();break;case"addClient":await this._mcpManager.addClient();break;case"startServer":this._mcpManager.startServer(e.serverId);break;case"stopServer":this._mcpManager.stopServer(e.serverId);break;case"startClient":this._mcpManager.startClient(e.clientId);break;case"stopClient":this._mcpManager.stopClient(e.clientId);break;case"editServer":this._mcpManager.editServer(e.data);break;case"editClient":this._mcpManager.editClient(e.data);break;case"deleteServer":this._mcpManager.deleteServer(e.serverId);break;case"deleteClient":this._mcpManager.deleteClient(e.clientId);break;case"getServerDetails":const n=this._mcpManager.getServerDetails(e.serverId);this._panel.webview.postMessage({command:"editServer",server:n});break;case"getClientDetails":const t=this._mcpManager.getClientDetails(e.clientId);this._panel.webview.postMessage({command:"editClient",client:t})}}),null,this._disposables)}dispose(){for(d.currentPanel=void 0,this._panel.dispose();this._disposables.length;){const e=this._disposables.pop();e&&e.dispose()}}_update(){const e=this._panel.webview;this._panel.title="MCP Manager",this._panel.webview.html=this._getHtmlForWebview(e)}_getHtmlForWebview(e){const n=this._mcpManager.getServers(),t=this._mcpManager.getClients();return`<!DOCTYPE html>\n            <html lang="en">\n            <head>\n                <meta charset="UTF-8">\n                <meta name="viewport" content="width=device-width, initial-scale=1.0">\n                <title>MCP Manager</title>\n                <style>\n                    :root {\n                        --container-padding: 20px;\n                        --input-padding-vertical: 6px;\n                        --input-padding-horizontal: 12px;\n                        --input-margin-vertical: 4px;\n                        --input-margin-horizontal: 0;\n                    }\n\n                    body {\n                        padding: 0;\n                        margin: 0;\n                        color: var(--vscode-foreground);\n                        font-size: var(--vscode-font-size);\n                        font-weight: var(--vscode-font-weight);\n                        font-family: var(--vscode-font-family);\n                        background-color: var(--vscode-editor-background);\n                    }\n\n                    .container {\n                        display: flex;\n                        flex-direction: column;\n                        height: 100vh;\n                        max-width: 1200px;\n                        margin: 0 auto;\n                        padding: var(--container-padding);\n                    }\n\n                    .header {\n                        display: flex;\n                        justify-content: space-between;\n                        align-items: center;\n                        margin-bottom: 20px;\n                    }\n\n                    .header h1 {\n                        margin: 0;\n                        padding: 0;\n                    }\n\n                    .panels-container {\n                        display: flex;\n                        flex-direction: column;\n                        flex-grow: 1;\n                        overflow: hidden;\n                        border: 1px solid var(--vscode-widget-border);\n                        border-radius: 4px;\n                    }\n\n                    .panel {\n                        flex: 1;\n                        padding: 10px;\n                        overflow-y: auto;\n                    }\n\n                    .panel-header {\n                        display: flex;\n                        justify-content: space-between;\n                        align-items: center;\n                        margin-bottom: 10px;\n                        padding-bottom: 5px;\n                        border-bottom: 1px solid var(--vscode-widget-border);\n                    }\n\n                    .divider {\n                        height: 1px;\n                        background-color: var(--vscode-widget-border);\n                    }\n\n                    .mcp-item {\n                        margin-bottom: 10px;\n                        padding: 10px;\n                        border-radius: 4px;\n                        background-color: var(--vscode-editor-inactiveSelectionBackground);\n                    }\n\n                    .mcp-item.active {\n                        background-color: var(--vscode-editor-selectionBackground);\n                    }\n\n                    .mcp-item-header {\n                        display: flex;\n                        justify-content: space-between;\n                        align-items: center;\n                        margin-bottom: 5px;\n                    }\n\n                    .mcp-item-details {\n                        display: flex;\n                        justify-content: space-between;\n                        align-items: center;\n                    }\n\n                    .mcp-item-command {\n                        font-family: var(--vscode-editor-font-family);\n                        font-size: var(--vscode-editor-font-size);\n                        color: var(--vscode-textPreformat-foreground);\n                        background-color: var(--vscode-textBlockQuote-background);\n                        padding: 2px 6px;\n                        border-radius: 2px;\n                        overflow: hidden;\n                        text-overflow: ellipsis;\n                        max-width: 70%;\n                    }\n\n                    .mcp-action-button {\n                        padding: var(--input-padding-vertical) var(--input-padding-horizontal);\n                        border: none;\n                        border-radius: 2px;\n                        font-size: var(--vscode-font-size);\n                        cursor: pointer;\n                    }\n\n                    .mcp-action-button.start {\n                        background-color: var(--vscode-button-background);\n                        color: var(--vscode-button-foreground);\n                    }\n\n                    .mcp-action-button.stop {\n                        background-color: var(--vscode-editorError-foreground);\n                        color: var(--vscode-button-foreground);\n                    }\n\n                    .add-button {\n                        padding: var(--input-padding-vertical) var(--input-padding-horizontal);\n                        border: none;\n                        border-radius: 2px;\n                        font-size: var(--vscode-font-size);\n                        background-color: var(--vscode-button-background);\n                        color: var(--vscode-button-foreground);\n                        cursor: pointer;\n                    }\n\n                    .empty-message {\n                        padding: 20px;\n                        text-align: center;\n                        color: var(--vscode-descriptionForeground);\n                    }\n\n                    @media (min-width: 768px) {\n                        .panels-container {\n                            flex-direction: row;\n                        }\n\n                        .divider {\n                            width: 1px;\n                            height: auto;\n                        }\n                    }\n\n                    .modal {\n                        display: none;\n                        position: fixed;\n                        z-index: 1;\n                        left: 0;\n                        top: 0;\n                        width: 100%;\n                        height: 100%;\n                        background-color: rgba(0,0,0,0.4);\n                    }\n\n                    .modal-content {\n                        background-color: var(--vscode-editor-background);\n                        margin: 15% auto;\n                        padding: 20px;\n                        border: 1px solid var(--vscode-widget-border);\n                        width: 80%;\n                        max-width: 500px;\n                        border-radius: 4px;\n                    }\n\n                    .form-group {\n                        margin-bottom: 15px;\n                    }\n\n                    .form-group label {\n                        display: block;\n                        margin-bottom: 5px;\n                    }\n\n                    .form-group input, .form-group select {\n                        width: 100%;\n                        padding: 8px;\n                        background: var(--vscode-input-background);\n                        color: var(--vscode-input-foreground);\n                        border: 1px solid var(--vscode-input-border);\n                        border-radius: 2px;\n                    }\n\n                    .modal-buttons {\n                        display: flex;\n                        justify-content: flex-end;\n                        gap: 10px;\n                        margin-top: 20px;\n                    }\n\n                    .mcp-item-actions {\n                        display: flex;\n                        gap: 5px;\n                    }\n\n                    .mcp-action-button.edit {\n                        background-color: var(--vscode-button-secondaryBackground);\n                        color: var(--vscode-button-secondaryForeground);\n                    }\n\n                    .mcp-action-button.delete {\n                        background-color: var(--vscode-errorForeground);\n                        color: var(--vscode-button-foreground);\n                    }\n\n                    .close {\n                        float: right;\n                        cursor: pointer;\n                        font-size: 20px;\n                    }\n\n                </style>\n            </head>\n            <body>\n                <div class="container">\n                    <div class="header">\n                        <h1>MCP Manager</h1>\n                    </div>\n                    <div class="panels-container">\n                        <div class="panel">\n                            <div class="panel-header">\n                                <h2>Servers</h2>\n                                <button class="add-button" onclick="addServer()">Add Server</button>\n                            </div>\n                            <div class="panel-content">\n                                ${n.map((e=>`\n                <div class="mcp-item ${e.isActive?"active":""}">\n                    <div class="mcp-item-header">\n                        <span class="mcp-item-name">${e.name}</span>\n                        <span class="mcp-item-type">${e.type}</span>\n                        <span class="mcp-item-status">${e.isActive?"Running":"Stopped"}</span>\n                    </div>\n                    <div class="mcp-item-details">\n                        <div class="mcp-item-command">${e.command}</div>\n                        <div class="mcp-item-actions">\n                            <button class="mcp-action-button ${e.isActive?"stop":"start"}" \n                                    onclick="handleServerAction('${e.id}', ${e.isActive})">\n                                ${e.isActive?"Stop":"Start"}\n                            </button>\n                            <button class="mcp-action-button edit" onclick="editServer('${e.id}')">\n                                Edit\n                            </button>\n                            <button class="mcp-action-button delete" onclick="deleteServer('${e.id}')">\n                                Delete\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            `)).join("")||'<div class="empty-message">No servers added yet.</div>'}\n                            </div>\n                        </div>\n                        <div class="divider"></div>\n                        <div class="panel">\n                            <div class="panel-header">\n                                <h2>Clients</h2>\n                                <button class="add-button" onclick="addClient()">Add Client</button>\n                            </div>\n                            <div class="panel-content">\n                                ${t.map((e=>`\n                <div class="mcp-item ${e.isActive?"active":""}">\n                    <div class="mcp-item-header">\n                        <span class="mcp-item-name">${e.name}</span>\n                        <span class="mcp-item-type">${e.type}</span>\n                        <span class="mcp-item-status">${e.isActive?"Running":"Stopped"}</span>\n                    </div>\n                    <div class="mcp-item-details">\n                        <div class="mcp-item-command">${e.command}</div>\n                        <div class="mcp-item-actions">\n                            <button class="mcp-action-button ${e.isActive?"stop":"start"}" \n                                    onclick="handleClientAction('${e.id}', ${e.isActive})">\n                                ${e.isActive?"Stop":"Start"}\n                            </button>\n                            <button class="mcp-action-button edit" onclick="editClient('${e.id}')">\n                                Edit\n                            </button>\n                            <button class="mcp-action-button delete" onclick="deleteClient('${e.id}')">\n                                Delete\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            `)).join("")||'<div class="empty-message">No clients added yet.</div>'}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                \x3c!-- Add Server Modal --\x3e\n                <div id="addServerModal" class="modal">\n                    <div class="modal-content">\n                        <span class="close" onclick="closeModal('addServerModal')">&times;</span>\n                        <h2>Add Server</h2>\n                        <form id="addServerForm">\n                            <div class="form-group">\n                                <label for="serverName">Name:</label>\n                                <input type="text" id="serverName" required>\n                            </div>\n                            <div class="form-group">\n                                <label for="serverType">Type:</label>\n                                <select id="serverType" required>\n                                    <option value="process">Process</option>\n                                    <option value="sse">SSE</option>\n                                </select>\n                            </div>\n                            <div class="form-group">\n                                <label for="serverCommand">Command/URL:</label>\n                                <input type="text" id="serverCommand" required>\n                            </div>\n                            <div class="modal-buttons">\n                                <button type="button" onclick="closeModal('addServerModal')" class="mcp-action-button">Cancel</button>\n                                <button type="submit" class="mcp-action-button start">Add Server</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n\n                \x3c!-- Add Client Modal --\x3e\n                <div id="addClientModal" class="modal">\n                    <div class="modal-content">\n                        <span class="close" onclick="closeModal('addClientModal')">&times;</span>\n                        <h2>Add Client</h2>\n                        <form id="addClientForm">\n                            <div class="form-group">\n                                <label for="clientName">Name:</label>\n                                <input type="text" id="clientName" required>\n                            </div>\n                            <div class="form-group">\n                                <label for="clientType">Type:</label>\n                                <select id="clientType" required>\n                                    <option value="process">Process</option>\n                                    <option value="sse">SSE</option>\n                                </select>\n                            </div>\n                            <div class="form-group">\n                                <label for="clientCommand">Command/URL:</label>\n                                <input type="text" id="clientCommand" required>\n                            </div>\n                            <div class="modal-buttons">\n                                <button type="button" onclick="closeModal('addClientModal')" class="mcp-action-button">Cancel</button>\n                                <button type="submit" class="mcp-action-button start">Add Client</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n\n                \x3c!-- Edit Server Modal --\x3e\n                <div id="editServerModal" class="modal">\n                    <div class="modal-content">\n                        <span class="close" onclick="closeModal('editServerModal')">&times;</span>\n                        <h2>Edit Server</h2>\n                        <form id="editServerForm">\n                            <input type="hidden" id="editServerId">\n                            <div class="form-group">\n                                <label for="editServerName">Name:</label>\n                                <input type="text" id="editServerName" required>\n                            </div>\n                            <div class="form-group">\n                                <label for="editServerType">Type:</label>\n                                <select id="editServerType" required>\n                                    <option value="process">Process</option>\n                                    <option value="sse">SSE</option>\n                                </select>\n                            </div>\n                            <div class="form-group">\n                                <label for="editServerCommand">Command/URL:</label>\n                                <input type="text" id="editServerCommand" required>\n                            </div>\n                            <div class="modal-buttons">\n                                <button type="button" onclick="closeModal('editServerModal')" class="mcp-action-button">Cancel</button>\n                                <button type="submit" class="mcp-action-button start">Save Changes</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n\n                \x3c!-- Edit Client Modal --\x3e\n                <div id="editClientModal" class="modal">\n                    <div class="modal-content">\n                        <span class="close" onclick="closeModal('editClientModal')">&times;</span>\n                        <h2>Edit Client</h2>\n                        <form id="editClientForm">\n                            <input type="hidden" id="editClientId">\n                            <div class="form-group">\n                                <label for="editClientName">Name:</label>\n                                <input type="text" id="editClientName" required>\n                            </div>\n                            <div class="form-group">\n                                <label for="editClientType">Type:</label>\n                                <select id="editClientType" required>\n                                    <option value="process">Process</option>\n                                    <option value="sse">SSE</option>\n                                </select>\n                            </div>\n                            <div class="form-group">\n                                <label for="editClientCommand">Command/URL:</label>\n                                <input type="text" id="editClientCommand" required>\n                            </div>\n                            <div class="modal-buttons">\n                                <button type="button" onclick="closeModal('editClientModal')" class="mcp-action-button">Cancel</button>\n                                <button type="submit" class="mcp-action-button start">Save Changes</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n\n                <script>\n                    const vscode = acquireVsCodeApi();\n\n                    function showModal(modalId) {\n                        document.getElementById(modalId).style.display = "block";\n                    }\n\n                    function closeModal(modalId) {\n                        document.getElementById(modalId).style.display = "none";\n                    }\n\n                    function addServer() {\n                        showModal('addServerModal');\n                    }\n\n                    function addClient() {\n                        showModal('addClientModal');\n                    }\n\n                    document.getElementById('addServerForm').addEventListener('submit', function(e) {\n                        e.preventDefault();\n                        const data = {\n                            name: document.getElementById('serverName').value,\n                            type: document.getElementById('serverType').value,\n                            command: document.getElementById('serverCommand').value\n                        };\n                        vscode.postMessage({\n                            command: 'addServer',\n                            data: data\n                        });\n                        closeModal('addServerModal');\n                        this.reset();\n                    });\n\n                    document.getElementById('addClientForm').addEventListener('submit', function(e) {\n                        e.preventDefault();\n                        const data = {\n                            name: document.getElementById('clientName').value,\n                            type: document.getElementById('clientType').value,\n                            command: document.getElementById('clientCommand').value\n                        };\n                        vscode.postMessage({\n                            command: 'addClient',\n                            data: data\n                        });\n                        closeModal('addClientModal');\n                        this.reset();\n                    });\n\n                    document.getElementById('editServerForm').addEventListener('submit', function(e) {\n                        e.preventDefault();\n                        const data = {\n                            id: document.getElementById('editServerId').value,\n                            name: document.getElementById('editServerName').value,\n                            type: document.getElementById('editServerType').value,\n                            command: document.getElementById('editServerCommand').value\n                        };\n                        vscode.postMessage({\n                            command: 'editServer',\n                            data: data\n                        });\n                        closeModal('editServerModal');\n                    });\n\n                    document.getElementById('editClientForm').addEventListener('submit', function(e) {\n                        e.preventDefault();\n                        const data = {\n                            id: document.getElementById('editClientId').value,\n                            name: document.getElementById('editClientName').value,\n                            type: document.getElementById('editClientType').value,\n                            command: document.getElementById('editClientCommand').value\n                        };\n                        vscode.postMessage({\n                            command: 'editClient',\n                            data: data\n                        });\n                        closeModal('editClientModal');\n                    });\n\n                    function handleServerAction(serverId, isActive) {\n                        vscode.postMessage({\n                            command: isActive ? 'stopServer' : 'startServer',\n                            serverId: serverId\n                        });\n                    }\n\n                    function handleClientAction(clientId, isActive) {\n                        vscode.postMessage({\n                            command: isActive ? 'stopClient' : 'startClient',\n                            clientId: clientId\n                        });\n                    }\n\n                    function editServer(serverId) {\n                        vscode.postMessage({\n                            command: 'getServerDetails',\n                            serverId: serverId\n                        });\n                    }\n\n                    function editClient(clientId) {\n                        vscode.postMessage({\n                            command: 'getClientDetails',\n                            clientId: clientId\n                        });\n                    }\n\n                    function deleteServer(serverId) {\n                        if (confirm('Are you sure you want to delete this server?')) {\n                            vscode.postMessage({\n                                command: 'deleteServer',\n                                serverId: serverId\n                            });\n                        }\n                    }\n\n                    function deleteClient(clientId) {\n                        if (confirm('Are you sure you want to delete this client?')) {\n                            vscode.postMessage({\n                                command: 'deleteClient',\n                                clientId: clientId\n                            });\n                        }\n                    }\n\n                    window.addEventListener('message', event => {\n                        const message = event.data;\n                        switch (message.command) {\n                            case 'editServer':\n                                document.getElementById('editServerId').value = message.server.id;\n                                document.getElementById('editServerName').value = message.server.name;\n                                document.getElementById('editServerType').value = message.server.type;\n                                document.getElementById('editServerCommand').value = message.server.command;\n                                showModal('editServerModal');\n                                break;\n                            case 'editClient':\n                                document.getElementById('editClientId').value = message.client.id;\n                                document.getElementById('editClientName').value = message.client.name;\n                                document.getElementById('editClientType').value = message.client.type;\n                                document.getElementById('editClientCommand').value = message.client.command;\n                                showModal('editClientModal');\n                                break;\n                        }\n                    });\n                <\/script>\n            </body>\n            </html>`}}n.MCPWebViewPanel=d,d.viewType="mcpManager"},855:function(e,n,t){var i,r=this&&this.__createBinding||(Object.create?function(e,n,t,i){void 0===i&&(i=t);var r=Object.getOwnPropertyDescriptor(n,t);r&&!("get"in r?!n.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,i,r)}:function(e,n,t,i){void 0===i&&(i=t),e[i]=n[t]}),s=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||(i=function(e){return i=Object.getOwnPropertyNames||function(e){var n=[];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[n.length]=t);return n},i(e)},function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t=i(e),o=0;o<t.length;o++)"default"!==t[o]&&r(n,e,t[o]);return s(n,e),n});Object.defineProperty(n,"__esModule",{value:!0}),n.ServerTreeItem=n.ServerTreeDataProvider=void 0;const a=o(t(398));n.ServerTreeDataProvider=class{constructor(e){this.mcpManager=e,this._onDidChangeTreeData=new a.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){if(!e){const e=this.mcpManager.getServers();return Promise.resolve(e.map((e=>new d(e,e.name,a.TreeItemCollapsibleState.None,{title:e.isActive?"Stop Server":"Start Server",command:e.isActive?"mcpManager.stopServer":"mcpManager.startServer",arguments:[e.id]}))))}return Promise.resolve([])}};class d extends a.TreeItem{constructor(e,n,t,i){super(n,t),this.server=e,this.label=n,this.collapsibleState=t,this.command=i,this.tooltip=`Type: ${e.type} | Command: ${e.command}`,this.description=e.isActive?"Running":"Stopped",this.iconPath=e.isActive?new a.ThemeIcon("play"):new a.ThemeIcon("stop"),this.contextValue="mcpServer"}}n.ServerTreeItem=d},857:e=>{e.exports=require("os")},896:e=>{e.exports=require("fs")},928:e=>{e.exports=require("path")}},n={},t=function t(i){var r=n[i];if(void 0!==r)return r.exports;var s=n[i]={exports:{}};return e[i].call(s.exports,s,s.exports,t),s.exports}(265);module.exports=t})();