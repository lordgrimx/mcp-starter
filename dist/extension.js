(()=>{"use strict";var e={203:function(e,t,n){var r,i=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||(r=function(e){return r=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},r(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=r(e),o=0;o<n.length;o++)"default"!==n[o]&&i(t,e,n[o]);return s(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.ClientTreeItem=t.ClientTreeDataProvider=void 0;const a=o(n(398));t.ClientTreeDataProvider=class{constructor(e){this.mcpManager=e,this._onDidChangeTreeData=new a.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){if(!e){const e=this.mcpManager.getClients();return Promise.resolve(e.map((e=>new c(e,e.name,a.TreeItemCollapsibleState.None,{title:e.isActive?"Stop Client":"Start Client",command:e.isActive?"mcpManager.stopClient":"mcpManager.startClient",arguments:[e.id]}))))}return Promise.resolve([])}};class c extends a.TreeItem{constructor(e,t,n,r){super(t,n),this.client=e,this.label=t,this.collapsibleState=n,this.command=r,this.tooltip=`Type: ${e.type} | Command: ${e.command}`,this.description=e.isActive?"Running":"Stopped",this.iconPath=e.isActive?new a.ThemeIcon("play"):new a.ThemeIcon("stop"),this.contextValue="mcpClient"}}t.ClientTreeItem=c},213:function(e,t,n){var r,i=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||(r=function(e){return r=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},r(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=r(e),o=0;o<n.length;o++)"default"!==n[o]&&i(t,e,n[o]);return s(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.MCPManager=void 0;const a=o(n(398)),c=o(n(896)),d=o(n(928)),l=o(n(857)),p=n(855),v=n(203),u=n(622);t.MCPManager=class{constructor(e){this.servers=[],this.clients=[],this.context=e,this.serversProvider=new p.ServerTreeDataProvider(this),this.clientsProvider=new v.ClientTreeDataProvider(this),this.settingsPath=d.join(l.homedir(),"darwin"===process.platform?"Library/Application Support/Code - Insiders/User/settings.json":"linux"===process.platform?".config/Code - Insiders/User/settings.json":"AppData/Roaming/Code - Insiders/User/settings.json"),this.loadServersAndClients()}loadServersAndClients(){const e=this.context.globalState.get("mcpServers",[]),t=this.context.globalState.get("mcpClients",[]);this.servers=e,this.clients=t,this.refreshTreeViews()}saveServersAndClients(){this.context.globalState.update("mcpServers",this.servers),this.context.globalState.update("mcpClients",this.clients),this.refreshTreeViews()}refreshTreeViews(){this.serversProvider.refresh(),this.clientsProvider.refresh(),this.updateVSCodeSettings()}updateVSCodeSettings(){try{if(c.existsSync(this.settingsPath)){let e=JSON.parse(c.readFileSync(this.settingsPath,"utf8"));for(const t of this.clients)e[`mcp.client.${t.id}`]={name:t.name,type:t.type,isActive:t.isActive};c.writeFileSync(this.settingsPath,JSON.stringify(e,null,4),"utf8"),a.window.showInformationMessage("VS Code settings updated successfully.")}else a.window.showWarningMessage("VS Code settings.json file not found.")}catch(e){a.window.showErrorMessage(`Failed to update VS Code settings: ${e}`)}}async addServer(){const e=await a.window.showInputBox({prompt:"Enter a name for the server",placeHolder:"Server Name"});if(!e)return;const t=await a.window.showQuickPick([{label:"process",description:"Run a command in a terminal"},{label:"sse",description:"Connect to Server-Sent Events endpoint"}],{placeHolder:"Select server type"});if(!t)return;const n=t.label;let r="";"process"===n?r=await a.window.showInputBox({prompt:"Enter the command to run",placeHolder:"Command"})||"":"sse"===n&&(r=await a.window.showInputBox({prompt:"Enter the SSE endpoint URL",placeHolder:"URL"})||"");const i={id:Date.now().toString(),name:e,type:n,command:r,isActive:!1};this.servers.push(i),this.saveServersAndClients(),u.MCPWebViewPanel.refresh()}async addClient(){const e=await a.window.showInputBox({prompt:"Enter a name for the client",placeHolder:"Client Name"});if(!e)return;const t=await a.window.showQuickPick([{label:"process",description:"Run a command in a terminal"},{label:"sse",description:"Connect to Server-Sent Events endpoint"}],{placeHolder:"Select client type"});if(!t)return;const n=t.label;let r="";"process"===n?r=await a.window.showInputBox({prompt:"Enter the command to run",placeHolder:"Command"})||"":"sse"===n&&(r=await a.window.showInputBox({prompt:"Enter the SSE endpoint URL",placeHolder:"URL"})||"");const i={id:Date.now().toString(),name:e,type:n,command:r,isActive:!1};this.clients.push(i),this.saveServersAndClients(),u.MCPWebViewPanel.refresh()}async startProcess(e,t){try{const n=a.window.createTerminal(`MCP ${e}`);return n.sendText(t),n.show(),n}catch(e){return void a.window.showErrorMessage(`Failed to start process: ${e instanceof Error?e.message:String(e)}`)}}async startServer(e){const t=this.servers.find((t=>t.id===e));if(t)try{"process"===t.type?await this.startProcess(t.name,t.command)&&(t.isActive=!0):"sse"===t.type&&(a.window.showInformationMessage(`SSE connection to ${t.command} established.`),t.isActive=!0),this.saveServersAndClients(),u.MCPWebViewPanel.refresh()}catch(e){a.window.showErrorMessage(`Failed to start server: ${e instanceof Error?e.message:String(e)}`)}else a.window.showErrorMessage(`Server with ID ${e} not found.`)}stopServer(e){const t=this.servers.find((t=>t.id===e));t?(a.window.showInformationMessage(`Server ${t.name} stopped.`),t.isActive=!1,this.saveServersAndClients(),u.MCPWebViewPanel.refresh()):a.window.showErrorMessage(`Server with ID ${e} not found.`)}startClient(e){const t=this.clients.find((t=>t.id===e));if(t){if("process"===t.type){const e=a.window.createTerminal(`MCP Client: ${t.name}`);e.sendText(t.command),e.show()}else"sse"===t.type&&a.window.showInformationMessage(`SSE connection to ${t.command} established.`);t.isActive=!0,this.saveServersAndClients(),u.MCPWebViewPanel.refresh()}else a.window.showErrorMessage(`Client with ID ${e} not found.`)}stopClient(e){const t=this.clients.find((t=>t.id===e));t?(a.window.showInformationMessage(`Client ${t.name} stopped.`),t.isActive=!1,this.saveServersAndClients(),u.MCPWebViewPanel.refresh()):a.window.showErrorMessage(`Client with ID ${e} not found.`)}getServers(){return this.servers}getClients(){return this.clients}getServersProvider(){return this.serversProvider}getClientsProvider(){return this.clientsProvider}}},265:function(e,t,n){var r,i=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||(r=function(e){return r=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},r(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=r(e),o=0;o<n.length;o++)"default"!==n[o]&&i(t,e,n[o]);return s(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.activate=function(e){console.log("MCP Manager extension is now active!");const t=new c.MCPManager(e),n=a.commands.registerCommand("mcpManager.showPanel",(()=>{d.MCPWebViewPanel.createOrShow(e.extensionUri,t)})),r=a.commands.registerCommand("mcpManager.addServer",(()=>{t.addServer()})),i=a.commands.registerCommand("mcpManager.addClient",(()=>{t.addClient()})),s=a.commands.registerCommand("mcpManager.startServer",(e=>{t.startServer(e)})),o=a.commands.registerCommand("mcpManager.stopServer",(e=>{t.stopServer(e)})),l=a.commands.registerCommand("mcpManager.startClient",(e=>{t.startClient(e)})),p=a.commands.registerCommand("mcpManager.stopClient",(e=>{t.stopClient(e)}));e.subscriptions.push(n,r,i,s,o,l,p);const v=t.getServersProvider(),u=t.getClientsProvider(),m=a.window.createTreeView("mcpServersView",{treeDataProvider:v,showCollapseAll:!0}),h=a.window.createTreeView("mcpClientsView",{treeDataProvider:u,showCollapseAll:!0});e.subscriptions.push(m,h),d.MCPWebViewPanel.createOrShow(e.extensionUri,t)},t.deactivate=function(){};const a=o(n(398)),c=n(213),d=n(622)},398:e=>{e.exports=require("vscode")},622:function(e,t,n){var r,i=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||(r=function(e){return r=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},r(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=r(e),o=0;o<n.length;o++)"default"!==n[o]&&i(t,e,n[o]);return s(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.MCPWebViewPanel=void 0;const a=o(n(398));class c{static createOrShow(e,t){const n=a.window.activeTextEditor?a.window.activeTextEditor.viewColumn:void 0;if(c.currentPanel)return void c.currentPanel._panel.reveal(n);const r=a.window.createWebviewPanel(c.viewType,"MCP Manager",n||a.ViewColumn.One,{enableScripts:!0,localResourceRoots:[a.Uri.joinPath(e,"resources")]});c.currentPanel=new c(r,e,t)}static refresh(){c.currentPanel&&c.currentPanel._update()}constructor(e,t,n){this._disposables=[],this._panel=e,this._extensionUri=t,this._mcpManager=n,this._update(),this._panel.onDidDispose((()=>this.dispose()),null,this._disposables),this._panel.onDidChangeViewState((e=>{this._panel.visible&&this._update()}),null,this._disposables),this._panel.webview.onDidReceiveMessage((async e=>{switch(e.command){case"addServer":await this._mcpManager.addServer();break;case"addClient":await this._mcpManager.addClient();break;case"startServer":this._mcpManager.startServer(e.serverId);break;case"stopServer":this._mcpManager.stopServer(e.serverId);break;case"startClient":this._mcpManager.startClient(e.clientId);break;case"stopClient":this._mcpManager.stopClient(e.clientId)}}),null,this._disposables)}dispose(){for(c.currentPanel=void 0,this._panel.dispose();this._disposables.length;){const e=this._disposables.pop();e&&e.dispose()}}_update(){const e=this._panel.webview;this._panel.title="MCP Manager",this._panel.webview.html=this._getHtmlForWebview(e)}_getHtmlForWebview(e){const t=this._mcpManager.getServers(),n=this._mcpManager.getClients();return`<!DOCTYPE html>\n            <html lang="en">\n            <head>\n                <meta charset="UTF-8">\n                <meta name="viewport" content="width=device-width, initial-scale=1.0">\n                <title>MCP Manager</title>\n                <style>\n                    :root {\n                        --container-padding: 20px;\n                        --input-padding-vertical: 6px;\n                        --input-padding-horizontal: 12px;\n                        --input-margin-vertical: 4px;\n                        --input-margin-horizontal: 0;\n                    }\n\n                    body {\n                        padding: 0;\n                        margin: 0;\n                        color: var(--vscode-foreground);\n                        font-size: var(--vscode-font-size);\n                        font-weight: var(--vscode-font-weight);\n                        font-family: var(--vscode-font-family);\n                        background-color: var(--vscode-editor-background);\n                    }\n\n                    .container {\n                        display: flex;\n                        flex-direction: column;\n                        height: 100vh;\n                        max-width: 1200px;\n                        margin: 0 auto;\n                        padding: var(--container-padding);\n                    }\n\n                    .header {\n                        display: flex;\n                        justify-content: space-between;\n                        align-items: center;\n                        margin-bottom: 20px;\n                    }\n\n                    .header h1 {\n                        margin: 0;\n                        padding: 0;\n                    }\n\n                    .panels-container {\n                        display: flex;\n                        flex-direction: column;\n                        flex-grow: 1;\n                        overflow: hidden;\n                        border: 1px solid var(--vscode-widget-border);\n                        border-radius: 4px;\n                    }\n\n                    .panel {\n                        flex: 1;\n                        padding: 10px;\n                        overflow-y: auto;\n                    }\n\n                    .panel-header {\n                        display: flex;\n                        justify-content: space-between;\n                        align-items: center;\n                        margin-bottom: 10px;\n                        padding-bottom: 5px;\n                        border-bottom: 1px solid var(--vscode-widget-border);\n                    }\n\n                    .divider {\n                        height: 1px;\n                        background-color: var(--vscode-widget-border);\n                    }\n\n                    .mcp-item {\n                        margin-bottom: 10px;\n                        padding: 10px;\n                        border-radius: 4px;\n                        background-color: var(--vscode-editor-inactiveSelectionBackground);\n                    }\n\n                    .mcp-item.active {\n                        background-color: var(--vscode-editor-selectionBackground);\n                    }\n\n                    .mcp-item-header {\n                        display: flex;\n                        justify-content: space-between;\n                        align-items: center;\n                        margin-bottom: 5px;\n                    }\n\n                    .mcp-item-details {\n                        display: flex;\n                        justify-content: space-between;\n                        align-items: center;\n                    }\n\n                    .mcp-item-command {\n                        font-family: var(--vscode-editor-font-family);\n                        font-size: var(--vscode-editor-font-size);\n                        color: var(--vscode-textPreformat-foreground);\n                        background-color: var(--vscode-textBlockQuote-background);\n                        padding: 2px 6px;\n                        border-radius: 2px;\n                        overflow: hidden;\n                        text-overflow: ellipsis;\n                        max-width: 70%;\n                    }\n\n                    .mcp-action-button {\n                        padding: var(--input-padding-vertical) var(--input-padding-horizontal);\n                        border: none;\n                        border-radius: 2px;\n                        font-size: var(--vscode-font-size);\n                        cursor: pointer;\n                    }\n\n                    .mcp-action-button.start {\n                        background-color: var(--vscode-button-background);\n                        color: var(--vscode-button-foreground);\n                    }\n\n                    .mcp-action-button.stop {\n                        background-color: var(--vscode-editorError-foreground);\n                        color: var(--vscode-button-foreground);\n                    }\n\n                    .add-button {\n                        padding: var(--input-padding-vertical) var(--input-padding-horizontal);\n                        border: none;\n                        border-radius: 2px;\n                        font-size: var(--vscode-font-size);\n                        background-color: var(--vscode-button-background);\n                        color: var(--vscode-button-foreground);\n                        cursor: pointer;\n                    }\n\n                    .empty-message {\n                        padding: 20px;\n                        text-align: center;\n                        color: var(--vscode-descriptionForeground);\n                    }\n\n                    @media (min-width: 768px) {\n                        .panels-container {\n                            flex-direction: row;\n                        }\n\n                        .divider {\n                            width: 1px;\n                            height: auto;\n                        }\n                    }\n                </style>\n            </head>\n            <body>\n                <div class="container">\n                    <div class="header">\n                        <h1>MCP Manager</h1>\n                    </div>\n                    <div class="panels-container">\n                        <div class="panel">\n                            <div class="panel-header">\n                                <h2>Servers</h2>\n                                <button class="add-button" onclick="addServer()">Add Server</button>\n                            </div>\n                            <div class="panel-content">\n                                ${t.map((e=>`\n                <div class="mcp-item ${e.isActive?"active":""}">\n                    <div class="mcp-item-header">\n                        <span class="mcp-item-name">${e.name}</span>\n                        <span class="mcp-item-type">${e.type}</span>\n                        <span class="mcp-item-status">${e.isActive?"Running":"Stopped"}</span>\n                    </div>\n                    <div class="mcp-item-details">\n                        <div class="mcp-item-command">${e.command}</div>\n                        <button class="mcp-action-button ${e.isActive?"stop":"start"}" \n                                onclick="handleServerAction('${e.id}', ${e.isActive})">\n                            ${e.isActive?"Stop":"Start"}\n                        </button>\n                    </div>\n                </div>\n            `)).join("")||'<div class="empty-message">No servers added yet.</div>'}\n                            </div>\n                        </div>\n                        <div class="divider"></div>\n                        <div class="panel">\n                            <div class="panel-header">\n                                <h2>Clients</h2>\n                                <button class="add-button" onclick="addClient()">Add Client</button>\n                            </div>\n                            <div class="panel-content">\n                                ${n.map((e=>`\n                <div class="mcp-item ${e.isActive?"active":""}">\n                    <div class="mcp-item-header">\n                        <span class="mcp-item-name">${e.name}</span>\n                        <span class="mcp-item-type">${e.type}</span>\n                        <span class="mcp-item-status">${e.isActive?"Running":"Stopped"}</span>\n                    </div>\n                    <div class="mcp-item-details">\n                        <div class="mcp-item-command">${e.command}</div>\n                        <button class="mcp-action-button ${e.isActive?"stop":"start"}" \n                                onclick="handleClientAction('${e.id}', ${e.isActive})">\n                            ${e.isActive?"Stop":"Start"}\n                        </button>\n                    </div>\n                </div>\n            `)).join("")||'<div class="empty-message">No clients added yet.</div>'}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <script>\n                    const vscode = acquireVsCodeApi();\n\n                    function addServer() {\n                        vscode.postMessage({\n                            command: 'addServer'\n                        });\n                    }\n\n                    function addClient() {\n                        vscode.postMessage({\n                            command: 'addClient'\n                        });\n                    }\n\n                    function handleServerAction(serverId, isActive) {\n                        vscode.postMessage({\n                            command: isActive ? 'stopServer' : 'startServer',\n                            serverId: serverId\n                        });\n                    }\n\n                    function handleClientAction(clientId, isActive) {\n                        vscode.postMessage({\n                            command: isActive ? 'stopClient' : 'startClient',\n                            clientId: clientId\n                        });\n                    }\n                <\/script>\n            </body>\n            </html>`}}t.MCPWebViewPanel=c,c.viewType="mcpManager"},855:function(e,t,n){var r,i=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||(r=function(e){return r=Object.getOwnPropertyNames||function(e){var t=[];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[t.length]=n);return t},r(e)},function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n=r(e),o=0;o<n.length;o++)"default"!==n[o]&&i(t,e,n[o]);return s(t,e),t});Object.defineProperty(t,"__esModule",{value:!0}),t.ServerTreeItem=t.ServerTreeDataProvider=void 0;const a=o(n(398));t.ServerTreeDataProvider=class{constructor(e){this.mcpManager=e,this._onDidChangeTreeData=new a.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event}refresh(){this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){if(!e){const e=this.mcpManager.getServers();return Promise.resolve(e.map((e=>new c(e,e.name,a.TreeItemCollapsibleState.None,{title:e.isActive?"Stop Server":"Start Server",command:e.isActive?"mcpManager.stopServer":"mcpManager.startServer",arguments:[e.id]}))))}return Promise.resolve([])}};class c extends a.TreeItem{constructor(e,t,n,r){super(t,n),this.server=e,this.label=t,this.collapsibleState=n,this.command=r,this.tooltip=`Type: ${e.type} | Command: ${e.command}`,this.description=e.isActive?"Running":"Stopped",this.iconPath=e.isActive?new a.ThemeIcon("play"):new a.ThemeIcon("stop"),this.contextValue="mcpServer"}}t.ServerTreeItem=c},857:e=>{e.exports=require("os")},896:e=>{e.exports=require("fs")},928:e=>{e.exports=require("path")}},t={},n=function n(r){var i=t[r];if(void 0!==i)return i.exports;var s=t[r]={exports:{}};return e[r].call(s.exports,s,s.exports,n),s.exports}(265);module.exports=n})();